package com.finanstar.system.controller.customer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.Property;
import org.jeecgframework.core.common.controller.BaseController;
import org.jeecgframework.core.common.hibernate.qbc.CriteriaQuery;
import org.jeecgframework.core.common.model.common.UploadFile;
import org.jeecgframework.core.common.model.json.AjaxJson;
import org.jeecgframework.core.common.model.json.ComboBox;
import org.jeecgframework.core.common.model.json.DataGrid;
import org.jeecgframework.core.common.model.json.ValidForm;
import org.jeecgframework.core.constant.Globals;
import org.jeecgframework.core.enums.SysThemesEnum;
import org.jeecgframework.core.util.ContextHolderUtils;
import org.jeecgframework.core.util.ExceptionUtil;
import org.jeecgframework.core.util.ListtoMenu;
import org.jeecgframework.core.util.MyBeanUtils;
import org.jeecgframework.core.util.PasswordUtil;
import org.jeecgframework.core.util.ResourceUtil;
import org.jeecgframework.core.util.RoletoJson;
import org.jeecgframework.core.util.SetListSort;
import org.jeecgframework.core.util.StringUtil;
import org.jeecgframework.core.util.SysThemesUtil;
import org.jeecgframework.core.util.oConvertUtils;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.jeecgframework.tag.core.easyui.TagUtil;
import org.jeecgframework.tag.vo.datatable.DataTableReturn;
import org.jeecgframework.tag.vo.datatable.DataTables;
import org.jeecgframework.web.system.manager.ClientManager;
import org.jeecgframework.web.system.pojo.base.TSDepart;
import org.jeecgframework.web.system.pojo.base.TSFunction;
import org.jeecgframework.web.system.pojo.base.TSRole;
import org.jeecgframework.web.system.pojo.base.TSRoleFunction;
import org.jeecgframework.web.system.pojo.base.TSRoleUser;
import org.jeecgframework.web.system.pojo.base.TSUser;
import org.jeecgframework.web.system.pojo.base.TSUserOrg;
import org.jeecgframework.web.system.service.SystemService;
import org.jeecgframework.web.system.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.finanstar.system.pojo.FsCustomerCompany;
import com.finanstar.system.pojo.FsCustomerCompanyDeskBook;
import com.finanstar.system.pojo.FsProducts;
import com.finanstar.util.common.Util;


/**
 * @描述： TODO(客户公司 自定义 管理处理类)
 * 
 * @author:Daniel Pine
 * @联系方式:danielpine@sina.com
 * @date :2018年6月20日-下午5:34:35
 */
// @Scope("prototype")
@Controller
@RequestMapping("/customerController")
public class CustomerController extends BaseController {
  /**
   * Logger for this class
   */
  private static final Logger logger = Logger.getLogger(CustomerController.class);

  private UserService userService;
  private SystemService systemService;

  @Autowired
  public void setSystemService(SystemService systemService) {
    this.systemService = systemService;
  }

  @Autowired
  public void setUserService(UserService userService) {
    this.userService = userService;
  }

  /**
   * 
   * @方法描述： 查询客户公司账户表
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年6月20日-下午5:49:51
   * @return
   */
  @RequestMapping(params = "book")
  public ModelAndView book(HttpServletRequest request, HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("system/customer/book");

    TSUser u = ResourceUtil.getSessionUserName();

    // get session
    HttpSession session = ContextHolderUtils.getSession();
    // get user products
    List<String> proCodes = ResourceUtil.getSessionUserProducts();

    // Converted to uppercase
    List<String> proCodesUpper = new ArrayList<>();
    for (String s : proCodes) {
      proCodesUpper.add(s.toUpperCase());
    }

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    System.out.println(comp);

    System.out.println(proCodes);

    System.out.println(comp.getId());


    // get books
    List<FsCustomerCompanyDeskBook> blist = systemService.getCustomerBooks(comp.getAcountNo());

    mv.addObject("blist", blist);

    // ---

    mv.addObject("plist", proCodesUpper);



    return mv;
  }

  
  /**
   * 
   *  @方法描述： 查询交易员列表
   *  @作       者： Daniel Pine
   *  @日       期： 2018年6月21日-下午3:56:59
   *  @return
   */
  @RequestMapping(params = "trader")
  public ModelAndView trader(HttpServletRequest request, HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("system/customer/trader");

    TSUser u = ResourceUtil.getSessionUserName();

    // get session
    HttpSession session = ContextHolderUtils.getSession();
    // get user products
    List<String> proCodes = ResourceUtil.getSessionUserProducts();

    // Converted to uppercase
    List<String> proCodesUpper = new ArrayList<>();
    for (String s : proCodes) {
      proCodesUpper.add(s.toUpperCase());
    }

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    System.out.println(comp);

    System.out.println(proCodes);

    System.out.println(comp.getId());


    // get books
    List<FsCustomerCompanyDeskBook> blist = systemService.getCustomerBooks(comp.getAcountNo());

    // get traders

    mv.addObject("blist", blist);

    // ---

    mv.addObject("plist", proCodesUpper);



    return mv;
  }

  /**
   * 
   * @方法描述： 增加客户公司账户表,账户数量控制。
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年6月20日-下午5:49:51
   * @return
   */
  @RequestMapping(params = "addbook")
  public ModelAndView addbook(FsCustomerCompanyDeskBook book, HttpServletRequest request,
      HttpServletResponse response) {

    TSUser u = ResourceUtil.getSessionUserName();

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    // modify=null, num=null, desk=A, tradeAccount=B, product=EQCM, productInfo=C, status=active,
    // timeStamp=null, maker=null, company=null, acountNo=null, code=null, version=null
    book.setModify(ResourceUtil.STATUS_NEW);
    book.setTimeStamp(Util.getNowDate("yyyyMMdd"));
    book.setMaker(u.getRealName());
    book.setCompany(comp.getCompany());
    book.setAcountNo(comp.getAcountNo());
    book.setCode(comp.getCode());
    book.setVersion("1");


    ModelAndView mv = new ModelAndView("system/customer/book");

    logger.info(book);

    // save to DB.
    systemService.save(book);

    // get session
    HttpSession session = ContextHolderUtils.getSession();
    // get user products
    List<String> proCodes = ResourceUtil.getSessionUserProducts();

    // Converted to uppercase
    List<String> proCodesUpper = new ArrayList<>();
    for (String s : proCodes) {
      proCodesUpper.add(s.toUpperCase());
    }


    System.out.println(comp);

    System.out.println(proCodes);

    System.out.println(comp.getId());


    // get books
    List<FsCustomerCompanyDeskBook> blist = systemService.getCustomerBooks(comp.getAcountNo());

    mv.addObject("blist", blist);

    // ---

    mv.addObject("plist", proCodesUpper);

    return mv;
  }

  /**
   * 菜单列表
   * 
   * @param request
   * @return
   */
  @SuppressWarnings("unchecked")
  @RequestMapping(params = "menu")
  public void menu(HttpServletRequest request, HttpServletResponse response) {
    SetListSort sort = new SetListSort();
    TSUser u = ResourceUtil.getSessionUserName();
    // 登陆者的权限
    Set<TSFunction> loginActionlist = new HashSet<TSFunction>();// 已有权限菜单
    List<TSRoleUser> rUsers =
        systemService.findByProperty(TSRoleUser.class, "TSUser.id", u.getId());
    for (TSRoleUser ru : rUsers) {
      TSRole role = ru.getTSRole();
      List<TSRoleFunction> roleFunctionList =
          systemService.findByProperty(TSRoleFunction.class, "TSRole.id", role.getId());
      if (roleFunctionList.size() > 0) {
        for (TSRoleFunction roleFunction : roleFunctionList) {
          TSFunction function = (TSFunction) roleFunction.getTSFunction();
          loginActionlist.add(function);
        }
      }
    }
    List<TSFunction> bigActionlist = new ArrayList<TSFunction>();// 一级权限菜单
    List<TSFunction> smailActionlist = new ArrayList<TSFunction>();// 二级权限菜单
    if (loginActionlist.size() > 0) {
      for (TSFunction function : loginActionlist) {
        if (function.getFunctionLevel() == 0) {
          bigActionlist.add(function);
        } else if (function.getFunctionLevel() == 1) {
          smailActionlist.add(function);
        }
      }
    }
    // 菜单栏排序
    Collections.sort(bigActionlist, sort);
    Collections.sort(smailActionlist, sort);
    String logString = ListtoMenu.getMenu(bigActionlist, smailActionlist);
    // request.setAttribute("loginMenu",logString);
    try {
      response.getWriter().write(logString);
      response.getWriter().flush();
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        response.getWriter().close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }


  /**
   * 用户信息录入和更新
   * 
   * @param user
   * @param req
   * @return
   */
  @RequestMapping(params = "del")
  @ResponseBody
  public AjaxJson del(TSUser user, HttpServletRequest req) {
    String message = null;
    AjaxJson j = new AjaxJson();
    if ("admin".equals(user.getUserName())) {
      message = "超级管理员[admin]不可删除";
      j.setMsg(message);
      return j;
    }
    user = systemService.getEntity(TSUser.class, user.getId());
    // List<TSRoleUser> roleUser = systemService.findByProperty(TSRoleUser.class, "TSUser.id",
    // user.getId());
    if (!user.getStatus().equals(Globals.User_ADMIN)) {

      user.setDeleteFlag(Globals.Delete_Forbidden);
      userService.updateEntitie(user);
      message = "用户：" + user.getUserName() + "删除成功";
      /**
       * if (roleUser.size()>0) { // 删除用户时先删除用户和角色关系表 delRoleUser(user);
       * 
       * systemService.executeSql("delete from t_s_user_org where user_id=?", user.getId()); // 删除
       * 用户-机构 数据
       * 
       * userService.delete(user); message = "用户：" + user.getUserName() + "删除成功";
       * systemService.addLog(message, Globals.Log_Type_DEL, Globals.Log_Leavel_INFO); } else {
       * userService.delete(user); message = "用户：" + user.getUserName() + "删除成功"; }
       **/
    } else {
      message = "超级管理员不可删除";
    }

    j.setMsg(message);
    return j;
  }

}
