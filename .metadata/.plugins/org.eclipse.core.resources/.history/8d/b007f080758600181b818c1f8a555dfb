package com.finanstar.eqcm.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.jeecgframework.core.common.model.json.AjaxJson;
import org.jeecgframework.core.common.service.impl.CommonServiceImpl;
import org.jeecgframework.core.util.ResourceUtil;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.finanstar.eqcm.entity.deal.EqcmDeal;
import com.finanstar.eqcm.entity.deal.EqcmDealSched;
import com.finanstar.eqcm.service.EqcmTradeServiceI;
import com.finanstar.system.pojo.FsCustomerCompany;
import com.finanstar.util.common.Util;
import com.finanstar.util.http.SysContext;


@Service("eqcmTradeService")
@Transactional
public class EqcmTradeServiceImpl extends CommonServiceImpl implements EqcmTradeServiceI {

  // Logger for this class
  private static final Logger logger = Logger.getLogger(EqcmTradeServiceImpl.class);

  @Override
  public String getNewDealId(String sequenceNameYear) {


    Session session = this.getSession();

    // 数据库兼容性待处理2018-05-15
    SQLQuery query = session.createSQLQuery("select * from sequence where name=?");
    query.setParameter(0, sequenceNameYear);
    @SuppressWarnings("rawtypes")
    List list = query.list();
    if (list.isEmpty()) {
      // 不存在新建序列
      String ssql = "INSERT INTO sequence VALUES (?, ?, ?)";
      this.executeSql(ssql, sequenceNameYear, 0, 1);
    }

    SQLQuery query2 = session.createSQLQuery("SELECT NEXTVAL(?)");
    query2.setParameter(0, sequenceNameYear);
    Integer newDealId = (Integer) query2.list().get(0);
    return newDealId + "";

  }

  @Override
  public String findMaxDealId() {


    List<String> list = this.findHql("select max(d.dealId) from EqcmDeal as d");

    if (list.isEmpty()) {
      return null;
    } else {
      return list.get(0);
    }

  }

  @Override
  public AjaxJson addTrade(AjaxJson j, EqcmDeal deal, EqcmDealSched dealSched, String id) {

    logger.info("*****************新增交易**********************");
    logger.info(id);
    logger.info(deal);
    logger.info(dealSched);
    // logger.info(findMaxDealId());

    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");

    String dealId = null;// tradeId

    // 检测dealid生成序列是否存在
    // 不存在新建
    // 判断当前数据库


    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    String pre = comp.getCode().toUpperCase();// 公司代号
    // String aft = "EM";// 项目、产品名


    // 使用自增序列 处理并发
    // MySQL 手动实现，Oracle 自带
    // INSERT INTO sequence VALUES ('TestSeq', 0, 1);----添加一个sequence名称和初始值，以及自增幅度
    // SELECT SETVAL('TestSeq', 10);---设置指定sequence的初始值
    // SELECT CURRVAL('TestSeq');--查询指定sequence的当前值
    // SELECT NEXTVAL('TestSeq');--查询指定sequence的下一个值

    SimpleDateFormat sdfForId = new SimpleDateFormat("yy-yy-MMdd");

    String date = sdfForId.format(new Date());

    String year = date.split("-")[1];

    String sequenceName = pre + "_" + year;// 公司名加项目

    String idx = getNewDealId(sequenceName);

    int ii = 6 - idx.length();// 6位
    // 拼装0
    String s = "";
    for (int i = 0; i < ii; i++) {
      s += "0";
    }

    dealId = pre + year + s + idx;

    String tradeTerm = deal.getTradeTerm();

    JSONObject tt = (JSONObject) JSON.parse(tradeTerm);

    deal.setDealId(dealId);
    deal.setTradeId(dealId);
    deal.setTradeDate(tt.getString("EffDate"));
    deal.setRecordDate(sdf.format(new Date()));
    deal.setVersion("1");
    deal.setStatus("New");
    // deal.setUser(ResourceUtil.getSessionUserName().getUserName().replace(comp.getCode(), ""));
    deal.setUser(ResourceUtil.getSessionUserName().getRealName());
    deal.setVersionDate(sdf.format(new Date()));

    id = (String) this.getSession().save(deal);

    deal.setId(id);

    dealSched.setDeal(deal);

    this.save(dealSched);

    // 回显
    j.setObj(JSON.toJSON(deal));

    return j;

  }



  @Override
  public AjaxJson updateTrade(AjaxJson j, EqcmDeal deal, EqcmDealSched dealSched, String id) {

    String maxVersion = findMaxVersion(deal.getTradeId());

    logger.info("*****************修改交易**********************");
    logger.info(maxVersion);
    logger.info(deal);
    // 不是最大版本号不能进行操作

    if (deal.getVersion().equals(maxVersion)) {

      // System.out.println("正在操作最新版本");

      EqcmDeal thisdeal = this.getEntity(EqcmDeal.class, id);

      // 判断是否为Pending和Deleted
      // TODO

      if (thisdeal.getStatus().equals("Pending") || thisdeal.getStatus().equals("Deleted")) {

        // System.out.println("已经删除，只能查看");

        j.setObj("hasdel");

        return j;
      } else if (thisdeal.getStatus().equals("Verified")) {

        // System.out.println("已复核,Modified");

        // save: 状态 由Verified改为modified,version+1
        // ==============================================================================================
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");

        // 区分 新增还是修改


        //找出最大版本号+1
        Integer nv = Integer.parseInt(thisdeal.getVersion()) + 1;

        deal.setVersion(nv + "");

        deal.setStatus("Modified");


        String dealId = thisdeal.getDealId();

        String tradeTerm = deal.getTradeTerm();

        JSONObject tt = (JSONObject) JSON.parse(tradeTerm);

        deal.setTradeDate(tt.getString("EffDate"));
        deal.setRecordDate(sdf.format(new Date()));
        deal.setUser(ResourceUtil.getSessionUserName().getRealName());
        deal.setVersionDate(sdf.format(new Date()));

        id = (String) this.getSession().save(deal);

        deal.setId(id);
        
        //当前登录用户
        deal.setUser(ResourceUtil.getSessionUserName().getRealName());

        dealSched.setDeal(deal);

        this.save(dealSched);

        // 回显
        j.setObj(JSON.toJSON(deal));

        return j;

      } else {
        logger.info("未复核,原数据更改");
        // update

        // *****************修改原数据**********************/
        // 找出原deal
        EqcmDeal olddeal = thisdeal;

        // newDeal set begin
        // *****************新增交易**********************/

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");


        String dsid = olddeal.getDealSched().getId();

        deal.setId(id);

        String tradeTerm = deal.getTradeTerm();

        JSONObject tt = (JSONObject) JSON.parse(tradeTerm);

        deal.setTradeDate(tt.getString("EffDate"));
        deal.setRecordDate(sdf.format(new Date()));
        deal.setUser(ResourceUtil.getSessionUserName().getRealName());
        deal.setVersionDate(sdf.format(new Date()));

        dealSched.setId(dsid);

        dealSched.setDeal(deal);

        deal.setDealSched(dealSched);

        this.getSession().clear();

        this.updateEntitie(deal);

        // 回显
        j.setObj(JSON.toJSON(deal));

        return j;

      }
    } else {

      // System.out.println("不是最新版本，只能查看");


      j.setObj("not");

      return j;

    }



  }

  @Override
  public AjaxJson verifyTrade(AjaxJson j, String id) {


    EqcmDeal deal = this.get(EqcmDeal.class, id);

    String status = null;

    // 判断是否为最新版本

    String maxVersion = findMaxVersion(deal.getDealId());

    if (!deal.getVersion().equals(maxVersion)) {

      j.setObj("not");

      return j;
    } else if (deal.getStatus().equals("Pending")) {
      // 假如为最新版本
      // 判断当前状态是否为Pending
      // 若为Pending Status设为 Deleted
      status = "Deleted";

    } else if (deal.getStatus().equals("Deleted")) {
      // 假如为最新版本
      // 判断当前状态是否为Deleted

      j.setObj("hasdel");

      return j;

    } else {
      // 设为Verified
      status = "Verified";
    }
    // deal
    return newDeal(j, deal, status);
  }

  @Override
  public AjaxJson delTrade(AjaxJson j, String id) {
    EqcmDeal deal = this.get(EqcmDeal.class, id);

    String status = null;

    // 判断是否为最新版本

    String maxVersion = findMaxVersion(deal.getDealId());

    if (!deal.getVersion().equals(maxVersion)) {
      j.setObj("not");
      return j;
    } else if (deal.getStatus().equals("Pending") || deal.getStatus().equals("Deleted")) {
      // 假如为最新版本
      // 判断当前状态是否为Deleted和Pending
      j.setObj("hasdel");
      return j;
    } else {
      // 设为Verified
      status = "Pending";
    }
    return newDeal(j, deal, status);
  }

  @Override
  public AjaxJson recoveryTrade(AjaxJson j, String id) {

    EqcmDeal deal = this.get(EqcmDeal.class, id);

    String status = null;

    // 判断是否为最新版本

    String maxVersion = findMaxVersion(deal.getDealId());

    if (!deal.getVersion().equals(maxVersion)) {
      j.setObj("not");
      return j;
    } else if (deal.getStatus().equals("Deleted")) {
      // 假如为最新版本
      // 判断当前状态是否为Deleted和Pending
      j.setObj("hasdel");
      return j;
    } else if (deal.getStatus().equals("Pending")) {
      // 设为Verified
      status = "Modified";
    }
    return newDeal(j, deal, status);
  }


  @Override
  public String findMaxVersion(String dealid) {

    /*
     * String hql = "select max(b.version) from Booking b where b.tradeid=?" ;
     * 
     * List<String> list = this.findHql(hql, dealid);
     * 
     * if (list.isEmpty()) { return null; } else { return list.get(0); }
     */
    // 字符串 与 int max 问题
    String hql = "select e.version as vers from EqcmDeal as e where e.tradeId=?";


    List<String> list = this.findHql(hql, dealid);

    // System.out.println(list);

    if (list.isEmpty()) {
      return null;
    } else {

      ArrayList<Integer> l = new ArrayList<>();

      for (String string : list) {
        l.add(Integer.parseInt(string));
      }

      return Collections.max(l) + "";
    }

  }

  @Override
  public AjaxJson newDeal(AjaxJson j, EqcmDeal deal, String status) {
    deal.setId(null);

    EqcmDealSched dealSched = deal.getDealSched();

    dealSched.setId(null);

    deal.setStatus(status);

    String version = deal.getVersion();

    deal.setVersion((Integer.parseInt(version) + 1) + "");

    this.getSession().clear();

    String nid = (String) this.save(deal);

    deal.setId(nid);
    
    //当前登录用户
    deal.setUser(ResourceUtil.getSessionUserName().getRealName());

    dealSched.setDeal(deal);

    this.save(dealSched);

    JSONObject json = new JSONObject();


    json.put("book", JSON.toJSON(deal));

    json.put("nid", nid);

    j.setObj(json);
    return j;


  }

  @Override
  public List<EqcmDeal> findAllDeal(String dealType, String VerStaDate, String VerEndDate) {

    Session session = this.getSession();
    HttpSession httpsession = SysContext.getSession();
    @SuppressWarnings("unchecked")
    List<String> dealRoleList =
        (List<String>) httpsession.getAttribute(ResourceUtil.LOCAL_CLIENT_DEAL_ROLE_LIST);
    logger.info(dealRoleList);
    // 拼接通配符
    String mark = "";
    if (dealRoleList != null && !dealRoleList.isEmpty()) {
      for (int i = 0; i < dealRoleList.size(); i++) {
        mark += "?,";
      }
    }
    mark = mark.equals("") ? "?" : mark.substring(0, mark.length() - 1);

    Query q = session.createSQLQuery("select tt.* from trade_deal_eqcm tt where   tt.book in ("
        + mark
        + ") and tt.company=? and  tt.dealType=? and tt.versionDate between ? and ?  order by tt.dealId desc");

    int i = 0;
    // 账户赋值
    if (dealRoleList != null && !dealRoleList.isEmpty()) {
      for (String s : dealRoleList) {
        q.setParameter(i++, s.split("~")[2]);
      }
    } else {
      // 无数据访问权限，则查询测试账户的数据。
      q.setParameter(i++, "FINANSTAR_TEST");
    }

    q.setParameter(i++, ResourceUtil.getSessionUserComp().getCompany());
    q.setParameter(i++, dealType);
    q.setParameter(i++, VerStaDate);
    q.setParameter(i++, VerEndDate);

    q.setResultTransformer(Transformers.aliasToBean(EqcmDeal.class));
    @SuppressWarnings("unchecked")
    List<EqcmDeal> list = q.list();

    return list;


  }



  @Override
  public List<EqcmDeal> findNewDealOnly(String dealType, String VerStaDate, String VerEndDate) {
    Session session = this.getSession();

    HttpSession httpsession = SysContext.getSession();
    @SuppressWarnings("unchecked")
    List<String> dealRoleList =
        (List<String>) httpsession.getAttribute(ResourceUtil.LOCAL_CLIENT_DEAL_ROLE_LIST);
    logger.info(dealRoleList);
    String mark = "";
    if (dealRoleList != null && !dealRoleList.isEmpty()) {
      for (int i = 0; i < dealRoleList.size(); i++) {
        mark += "?,";
      }
    }

    mark = mark.equals("") ? "?" : mark.substring(0, mark.length() - 1);

    Query q = session.createSQLQuery(
        "select tt.* from trade_deal_eqcm tt ,(select K.A,K.C from(select t.did A,max(t.ver) C from "
            + "(select te.dealId did,CAST(te.version as SIGNED) ver from trade_deal_eqcm te where  book in ("
            + mark + ") and company=? )  t group by t.did ) K ) KK"
            + " where KK.A=tt.dealId and KK.C=tt.version and tt.dealType=? and tt.versionDate between ? and ?  order by tt.dealId desc");
    int i = 0;
    if (dealRoleList != null && !dealRoleList.isEmpty()) {
      for (String s : dealRoleList) {
        q.setParameter(i++, s.split("~")[2]);
      }
    } else {
      q.setParameter(i++, "FINANSTAR_TEST");
    }

    q.setParameter(i++, ResourceUtil.getSessionUserComp().getCompany());
    q.setParameter(i++, dealType);
    q.setParameter(i++, VerStaDate);
    q.setParameter(i++, VerEndDate);

    q.setResultTransformer(Transformers.aliasToBean(EqcmDeal.class));
    @SuppressWarnings("unchecked")
    List<EqcmDeal> list = q.list();

    return list;
  }

  @Override
  public EqcmDeal findDealById(String id) {
    return this.get(EqcmDeal.class, id);
  }


}
