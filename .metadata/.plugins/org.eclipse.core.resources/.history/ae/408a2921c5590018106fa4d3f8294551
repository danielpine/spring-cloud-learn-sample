package com.finanstar.eqcm.service.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.transform.Transformers;
import org.jeecgframework.core.common.service.impl.CommonServiceImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.finanstar.deal.entity.Deal;
import com.finanstar.deal.entity.Line;
import com.finanstar.eqcm.entity.deal.EqcmDeal;
import com.finanstar.eqcm.entity.report.ReportEqcm;
import com.finanstar.eqcm.entity.report.ReportEqcmLine;
import com.finanstar.eqcm.service.EqcmBatchServiceI;
import com.finanstar.fx.entity.ReportFx;
import com.finanstar.fx.entity.ReportFxLine;
import com.finanstar.fx.entity.ReportOption;
import com.finanstar.fx.util.Util;

import net.sf.json.JSONObject;

@Service("eqcmBatchService")
@Transactional
public class EqcmBatchServiceImpl extends CommonServiceImpl implements EqcmBatchServiceI {
  @Override
  public ReportEqcm findTargetReport(ReportOption ro) {
    //System.out.println(ro);
    List<ReportEqcm> r = this.findHql(
        "from ReportEqcm where batchType=? and valueDate=? and "
            + " comp=? and desk=? and book=? and market=?",
        ro.getBatchType(), ro.getValueDate(), ro.getComp(), ro.getDesk(), ro.getBook(),
        ro.getMarket());
    return r.get(0);

  }


  @Override
  public List<String> findAllReportAccount(String batchType) {

    // String sql = "select DISTINCT
    // CONCAT(t.comp,'@',t.desk,'@',t.book,'@',t.market,'@',t.valueDate)
    // from (select * from batch_report_fx order by
    // comp,desk,book,market,valueDate) t WHERE t.batchType=? ";
    List<String> li = new ArrayList<>();
    String sql =
        "select distinct t.comp,t.desk,t.book,t.market,t.valueDate from batch_report_eqcm t WHERE t.batchType=?  ";
    Session session = getSession();
    SQLQuery query = session.createSQLQuery(sql);
    query.setResultTransformer(Transformers.aliasToBean(ReportEqcm.class));
    query.setParameter(0, batchType);
    @SuppressWarnings("unchecked")
    List<ReportEqcm> list = query.list();
//    List<ReportEqcm> list = this.findHql(sql, batchType);
    for (ReportEqcm r : list) {
      String s = "";
      s += r.getComp();
      s += "@";
      s += r.getDesk();
      s += "@";
      s += r.getBook();
      s += "@";
      s += r.getMarket();
      s += "@";
      s += r.getValueDate();
      li.add(s);
    }
    return li;
  }



  @Override
  public List<EqcmDeal> findVerDeal(String info) {

    //System.out.println(info);
    String[] ifl = info.split(":");// 0:PNL 1:date 2:comp@desk@book
    Session session = this.getSession();

    Query q = session.createSQLQuery("select tt.* " + "from trade_deal_eqcm tt ,("
        + "select K.A,K.C from(" + "select t.did A,max(t.ver) C "
        + "from (select te.dealId did,CAST(te.version as SIGNED) ver "
        + "from trade_deal_eqcm te)  t group by t.did ) K " + ") KK" + " where KK.A=tt.dealId "
        + "and KK.C=tt.version " + "and tt.status=? "
        + "and tt.company=? and tt.desk=? and tt.book=? and tradeDate=?"
        + "order by tt.dealId desc");
    q.setParameter(0, "Verified");
    String[] b = ifl[2].split("@");
    q.setParameter(1, b[0]);
    q.setParameter(2, b[1]);
    q.setParameter(3, b[2]);
    q.setParameter(4, ifl[1]);
    q.setResultTransformer(Transformers.aliasToBean(EqcmDeal.class));
    @SuppressWarnings("unchecked")
    List<EqcmDeal> list = q.list();


    return list;
  }



  @Override
  public List<String> findAllBatchAccount() {

    List<String> sl = new ArrayList<>();

    Session session = this.getSession();

    Query q = session.createSQLQuery("select distinct tt.company,tt.desk,tt.book "
        + "from trade_deal_eqcm tt ,(" + "select K.A,K.C from(" + "select t.did A,max(t.ver) C "
        + "from (select te.dealId did,CAST(te.version as SIGNED) ver "
        + "from trade_deal_eqcm te)  t group by t.did ) K " + ") KK" + " where KK.A=tt.dealId "
        + "and KK.C=tt.version " + "and tt.status=? " + "order by tt.dealId desc");
    q.setParameter(0, "Verified");
    q.setResultTransformer(Transformers.aliasToBean(EqcmDeal.class));
    @SuppressWarnings("unchecked")
    List<EqcmDeal> list = q.list();
    if (!list.isEmpty()) {
      for (EqcmDeal e : list) {
        String s = "";
        s += e.getCompany();
        s += "@";
        s += e.getDesk();
        s += "@";
        s += e.getBook();
        sl.add(s);
      }
    }
    return sl;
  }



  @Override
  public void saveReport(List<String> ss, String info, Map<String, String> dealIdToId) {
    // 备份原数据

    // 更新原 DealId's sched lumppay ↓

    //System.out.println(dealIdToId);

    Map<String, String> sMap = new HashMap<>();

    // 更新原 DealId's sched lumppay ↑

    Map<String, String> l = new HashMap<>();

    String Title = "";

    // 遍历文件列表 生成json
    // int j = 0;
    for (String filepath : ss) {
      // add double quotation to out_file's key.
      String jsonstrout = new Util().readToJsonStr(filepath.split("&")[0]);

      String market = filepath.split("&")[1];

      // transform out_flie JSON_str to JSON_Object
      JSONObject out = JSONObject.fromObject(jsonstrout);

      // 获取序列和单个款项
      JSONObject DealSet = out.getJSONObject("PricerEqcm_Out").getJSONObject("DealSet");

      Iterator<?> keys = DealSet.keys();

      // 从out文件中取出TradeTerm，存入sMap

      while (keys.hasNext()) {

        String k = (String) keys.next();

        if (k.startsWith("D")) {

          List<Line> line = new ArrayList<>();

          JSONObject deal = DealSet.getJSONObject(k);
          JSONObject TradeTerm = deal.getJSONObject("TradeTerm");

          // 直接更新Tradeterm

          sMap.put(deal.getString("DealId"), TradeTerm.toString());

        }
      }

      // 更新序列和单个款项

      Object o = JSONObject.fromObject(out.get("PricerEqcm_Out")).get("Report");

      String[] split = o.toString().replaceAll("[\"|{|}]", "").split(",");

      Title = split[split.length - 2];
      // 获取报告

      // 排序
      for (int i = 0; i < split.length; i++) {
        if (split[i].startsWith("P")) {
          l.put(split[i].replace(split[i].split(":")[0] + ":", "").split("~")[0],
              info.replace(":", "&") + "&" + market + ","
                  + split[i].replace(split[i].split(":")[0] + ":", "")+","+Title);
        }
      }
    }

    //System.out.println(sMap);// key:dealId value:line_list
    //System.out.println(dealIdToId);// key:dealId value:old Deal primerykey

    Set<String> keySet = sMap.keySet();

    Iterator<String> it = keySet.iterator();

    while (it.hasNext()) {

      // Batch 后更新 单个款项和序列

      String k = it.next();

      //System.out.println(k);

      String id = dealIdToId.get(k).split("~")[0];

      EqcmDeal deal = this.get(EqcmDeal.class, id);

      deal.setTradeTerm(sMap.get(k));

      this.updateEntitie(deal);
    }

    // 报告相关 ReportFx ReportFxLine if exist, delete old.

    //System.out.println("--------------");
    //System.out.println(Title);
    //System.out.println("--------------");

    // report begin
    Map<String, ReportEqcm> mAreport = new HashMap<>();

    // ReportFx

    ArrayList<String> ll = new ArrayList<>(l.values());

    //System.out.println("++++++++++++++++");
    for (String string : ll) {
      //System.out.println(string);
    }
    //System.out.println("++++++++++++++++");
    for (int i = 0; i < ll.size(); i++) {
      ReportEqcm r = new ReportEqcm();

      //System.out.println("XXX" + ll.get(i).replaceAll("@", "&").replaceAll("&", "@"));

      String[] s = ll.get(i).replaceAll("@", "&").replaceAll("&", "@").split(",");
      
      String[] sp = s[0].split("@");

      r.setTitle(s[1]);
      r.setBatchType(sp[0]);
      r.setValueDate(sp[1]);
      r.setComp(sp[2]);
      r.setDesk(sp[3]);
      r.setBook(sp[4]);
      r.setMarket(sp[5]);//

      if (mAreport.containsKey(sp[5])) {

      } else {
        mAreport.put(sp[5], r);
      }

      // TODO****************************换成DealId***************************
      List<ReportEqcm> ro = this.findHql(
          "from ReportEqcm where batchType=? and valueDate=? and "
              + " comp=? and desk=? and book=? and market=?",
          sp[0], sp[1], sp[2], sp[3], sp[4], sp[5]);

      if (!ro.isEmpty()) {
        ReportEqcm rf = ro.get(0);
        String id = rf.getId();
        String sql = "delete from batch_report_eqcm_line where report_id=?";
        this.executeSql(sql, id);
        this.delete(rf);
      }

    }
    Set<String> set = mAreport.keySet();

    Iterator<String> iterator = set.iterator();
    Session session = getSession();

    // report begin
    Map<String, ReportEqcm> savedmAreport = new HashMap<>();

    while (iterator.hasNext()) {
      String market = iterator.next();
      ReportEqcm rr = mAreport.get(market);

      Serializable id = session.save(rr);

      rr.setId((String) id);

      savedmAreport.put(market, rr);
    }

    // report end

    // 按dealId 排序后 存库
    Set<String> ks = l.keySet();

    ArrayList<String> kl = new ArrayList<>(ks);

    Collections.sort(kl);

    for (String s : kl) {

      ReportEqcmLine rl = new ReportEqcmLine();

      // line
      String line = l.get(s).split(",")[1];
      rl.setItem(line);
      rl.setReport(savedmAreport.get(dealIdToId.get(line.split("~")[0]).split("~")[1]));
      this.save(rl);
    }

  }

}

