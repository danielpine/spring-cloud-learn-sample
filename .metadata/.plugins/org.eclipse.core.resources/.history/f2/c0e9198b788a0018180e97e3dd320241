package com.finanstar.system.controller.customer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.Property;
import org.jeecgframework.core.common.controller.BaseController;
import org.jeecgframework.core.common.dao.jdbc.JdbcDao;
import org.jeecgframework.core.common.hibernate.qbc.CriteriaQuery;
import org.jeecgframework.core.common.model.common.UploadFile;
import org.jeecgframework.core.common.model.json.AjaxJson;
import org.jeecgframework.core.common.model.json.ComboBox;
import org.jeecgframework.core.common.model.json.DataGrid;
import org.jeecgframework.core.common.model.json.ValidForm;
import org.jeecgframework.core.constant.Globals;
import org.jeecgframework.core.enums.SysThemesEnum;
import org.jeecgframework.core.util.ContextHolderUtils;
import org.jeecgframework.core.util.ExceptionUtil;
import org.jeecgframework.core.util.ListtoMenu;
import org.jeecgframework.core.util.MyBeanUtils;
import org.jeecgframework.core.util.PasswordUtil;
import org.jeecgframework.core.util.ResourceUtil;
import org.jeecgframework.core.util.RoletoJson;
import org.jeecgframework.core.util.SetListSort;
import org.jeecgframework.core.util.StringUtil;
import org.jeecgframework.core.util.SysThemesUtil;
import org.jeecgframework.core.util.YouBianCodeUtil;
import org.jeecgframework.core.util.oConvertUtils;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.jeecgframework.tag.core.easyui.TagUtil;
import org.jeecgframework.tag.vo.datatable.DataTableReturn;
import org.jeecgframework.tag.vo.datatable.DataTables;
import org.jeecgframework.web.system.manager.ClientManager;
import org.jeecgframework.web.system.pojo.base.TSDepart;
import org.jeecgframework.web.system.pojo.base.TSFunction;
import org.jeecgframework.web.system.pojo.base.TSRole;
import org.jeecgframework.web.system.pojo.base.TSRoleFunction;
import org.jeecgframework.web.system.pojo.base.TSRoleUser;
import org.jeecgframework.web.system.pojo.base.TSUser;
import org.jeecgframework.web.system.pojo.base.TSUserOrg;
import org.jeecgframework.web.system.service.SystemService;
import org.jeecgframework.web.system.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.finanstar.system.pojo.FsCustomerCompany;
import com.finanstar.system.pojo.FsCustomerCompanyDeskBook;
import com.finanstar.system.pojo.FsCustomerCompanyUserBook;
import com.finanstar.system.pojo.FsProducts;
import com.finanstar.system.vo.CustomUser;
import com.finanstar.util.common.Util;


/**
 * @描述： TODO(客户公司 自定义 管理处理类)
 * 
 * @author:Daniel Pine
 * @联系方式:danielpine@sina.com
 * @date :2018年6月20日-下午5:34:35
 */
// @Scope("prototype")
@Controller
@RequestMapping("/customerController")
public class CustomerController extends BaseController {
  /**
   * Logger for this class
   */
  private static final Logger logger = Logger.getLogger(CustomerController.class);

  private UserService userService;
  private SystemService systemService;

  @Autowired
  public void setSystemService(SystemService systemService) {
    this.systemService = systemService;
  }

  @Autowired
  public void setUserService(UserService userService) {
    this.userService = userService;
  }

  /**
   * 
   * @方法描述： 查询客户公司账户表
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年6月20日-下午5:49:51
   * @return
   */
  @RequestMapping(params = "book")
  public ModelAndView book(HttpServletRequest request, HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("system/customer/book");

    TSUser u = ResourceUtil.getSessionUserName();

    // get session
    HttpSession session = ContextHolderUtils.getSession();
    // get user products
    List<String> proCodes = ResourceUtil.getSessionUserProducts();

    // Converted to uppercase
    List<String> proCodesUpper = new ArrayList<>();
    for (String s : proCodes) {
      proCodesUpper.add(s.toUpperCase());
    }

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    // System.out.println(comp);

    // System.out.println(proCodes);

    // System.out.println(comp.getId());


    // get books
    List<FsCustomerCompanyDeskBook> blist = systemService.getCustomerBooks(comp.getAcountNo());

    mv.addObject("blist", blist);

    // ---

    List<FsProducts> prosObj =
        (List<FsProducts>) session.getAttribute(ResourceUtil.LOCAL_CLIENT_PROS);

    System.out.println(prosObj);

    mv.addObject("plist", prosObj);



    return mv;
  }


  /**
   * 
   * @方法描述： 查询交易员列表
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年6月21日-下午3:56:59
   * @return
   */
  @RequestMapping(params = "trader")
  public ModelAndView trader(HttpServletRequest request, HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("system/customer/trader");

    TSUser u = ResourceUtil.getSessionUserName();

    // get session
    HttpSession session = ContextHolderUtils.getSession();
    // get user products
    List<String> proCodes = ResourceUtil.getSessionUserProducts();

    // Converted to uppercase
    List<String> proCodesUpper = new ArrayList<>();
    for (String s : proCodes) {
      proCodesUpper.add(s.toUpperCase());
    }

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    // get books
    List<FsCustomerCompanyDeskBook> blist = systemService.getCustomerBooks(comp.getAcountNo());

    // get traders

    List<FsCustomerCompanyUserBook> tlist = systemService
        .findHql("from FsCustomerCompanyUserBook where acountNo=?", comp.getAcountNo());

    mv.addObject("blist", blist);

    mv.addObject("tlist", tlist);

    mv.addObject("code", comp.getCode());

    // ---

    mv.addObject("plist", proCodesUpper);



    return mv;
  }

  /**
   * 
   * @方法描述： 添加用户
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年6月22日-下午2:17:50
   * @return
   */
  @RequestMapping(params = "addtrader", method = RequestMethod.POST)
  public ModelAndView addtrader(CustomUser user, HttpServletRequest request,
      HttpServletResponse response) {
    
    // TODO 后台 数据安全性验证
    // TODO 后台 当前公司 用户数检查
    
    
    System.out.println("addtrader");

    ModelAndView mv = new ModelAndView("system/customer/trader");

    TSUser u = ResourceUtil.getSessionUserName();

    // get session
    HttpSession session = ContextHolderUtils.getSession();
    // get user products
    List<String> proCodes = ResourceUtil.getSessionUserProducts();

    // Converted to uppercase
    List<String> proCodesUpper = new ArrayList<>();
    for (String s : proCodes) {
      proCodesUpper.add(s.toUpperCase());
    }

    // get login user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    FsCustomerCompanyUserBook fsUser = new FsCustomerCompanyUserBook();


    fsUser.setModify(ResourceUtil.STATUS_NEW);
    fsUser.setTimeStamp(Util.getNowDate("yyyyMMdd"));
    fsUser.setMaker(u.getRealName());
    fsUser.setCompany(comp.getCompany());
    fsUser.setAcountNo(comp.getAcountNo());



    TSUser tsUser = new TSUser();

    String orgid = comp.getNum();


    // add user begin
    // //cusUser
    // getRoleIdByName
    List<TSRole> roleList = systemService.findByProperty(TSRole.class, "roleCode", "cusUser");
    String roleid = roleList.get(0).getId();

    // add custom admin user begin
    String message = null;

    // 设置管理员信息
    tsUser.setUserName(comp.getCode() + user.getUserName());
    tsUser.setPassword(user.getPassword());
    tsUser.setMobilePhone(user.getMobilePhone());
    tsUser.setRealName(user.getRealName());


    TSUser users = systemService.findUniqueByProperty(TSUser.class, "userName", user.getUserName());
    if (users != null) {
      message = "用户: " + users.getUserName() + "已经存在";
    } else {
      tsUser.setPassword(PasswordUtil.encrypt(tsUser.getUserName(), user.getPassword(),
          PasswordUtil.getStaticSalt()));

      tsUser.setStatus(Globals.User_Normal);
      tsUser.setDeleteFlag(Globals.Delete_Normal);
      String id = (String) systemService.save(tsUser);

      // 保存主键
      tsUser.setId(id);

      // 保存组织机构

      saveUserOrgList(orgid, tsUser);

      message = "用户: " + user.getUserName() + "添加成功";

      if (StringUtil.isNotEmpty(roleid)) {
        saveRoleUser(tsUser, roleid);
      }
      systemService.addLog(message, Globals.Log_Type_INSERT, Globals.Log_Leavel_INFO);
    }

    // add user end

    try {
      MyBeanUtils.copyBeanNotNull2Bean(user, fsUser);
    } catch (Exception e) {
      e.printStackTrace();
    }

    fsUser.setTsusr(tsUser);

    systemService.save(fsUser);

    System.out.println("." + user);

    System.out.println("." + fsUser);

    System.out.println(comp);

    System.out.println(proCodes);

    System.out.println(comp.getId());


    // get books
    List<FsCustomerCompanyDeskBook> blist = systemService.getCustomerBooks(comp.getAcountNo());

    // get traders

    List<FsCustomerCompanyUserBook> tlist = systemService
        .findHql("from FsCustomerCompanyUserBook where acountNo=?", comp.getAcountNo());

    mv.addObject("blist", blist);

    mv.addObject("tlist", tlist);

    mv.addObject("code", comp.getCode());
    // ---

    mv.addObject("plist", proCodesUpper);



    return mv;
  }



  /**
   * 保存 用户-角色 关系信息
   * 
   * @param roleidstr roleidstr
   * @param user user
   */
  protected void saveRoleUser(TSUser user, String roleidstr) {
    String[] roleids = roleidstr.split(",");
    for (int i = 0; i < roleids.length; i++) {
      TSRoleUser rUser = new TSRoleUser();
      TSRole role = systemService.getEntity(TSRole.class, roleids[i]);
      rUser.setTSRole(role);
      rUser.setTSUser(user);
      systemService.save(rUser);

    }
  }

  /**
   * 保存 用户-组织机构 关系信息
   * 
   * @param request request
   * @param user user
   */
  private void saveUserOrgList(String orgIds, TSUser user) {

    List<TSUserOrg> userOrgList = new ArrayList<TSUserOrg>();
    List<String> orgIdList = extractIdListByComma(orgIds);
    for (String orgId : orgIdList) {
      TSDepart depart = new TSDepart();
      depart.setId(orgId);

      TSUserOrg userOrg = new TSUserOrg();
      userOrg.setTsUser(user);
      userOrg.setTsDepart(depart);

      userOrgList.add(userOrg);
    }
    if (!userOrgList.isEmpty()) {
      systemService.batchSave(userOrgList);
    }
  }


  /**
   * 
   * @方法描述： 增加客户公司账户表,账户数量控制。
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年6月20日-下午5:49:51
   * @return
   */
  @RequestMapping(params = "addbook", method = RequestMethod.POST)
  public void addbook(FsCustomerCompanyDeskBook book, HttpServletResponse response) {

    // TODO 后台 数据安全性验证
    
    
    TSUser u = ResourceUtil.getSessionUserName();

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    // modify=null, num=null, desk=A, tradeAccount=B, product=EQCM, productInfo=C, status=active,
    // timeStamp=null, maker=null, company=null, acountNo=null, code=null, version=null
    book.setModify(ResourceUtil.STATUS_NEW);
    book.setTimeStamp(Util.getNowDate("yyyyMMdd"));
    book.setMaker(u.getRealName());
    book.setCompany(comp.getCompany());
    book.setAcountNo(comp.getAcountNo());
    book.setCode(comp.getCode());
    book.setVersion("1");

    logger.info(book);

    // save to DB.
    systemService.save(book);
    try {
      response.sendRedirect("customerController.do?book");
    } catch (IOException e) {
      e.printStackTrace();
    }

  }


  /**
   * 查询用户
   * 
   * @param user
   * @param req
   * @return
   */
  @RequestMapping(params = "ulist", method = RequestMethod.POST)
  @ResponseBody
  public AjaxJson ulist(HttpServletRequest req) {

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    String ukeyId = comp.getUkeyId();

    List<FsCustomerCompanyUserBook> ulist = systemService
        .findHql(" from FsCustomerCompanyUserBook where acountNo=?", comp.getAcountNo());

    for (FsCustomerCompanyUserBook u : ulist) {
      if (u.getNum() != null)
        ukeyId = ukeyId.replace(u.getNum(), "");
    }

    AjaxJson j = new AjaxJson();

    ukeyId = ukeyId.replaceAll(",+", ",");

    if (ukeyId.startsWith(","))
      ukeyId = ukeyId.substring(1, ukeyId.length());
    if (ukeyId.endsWith(","))
      ukeyId = ukeyId.substring(0, ukeyId.length() - 1);


    j.setObj(ukeyId);

    return j;
  }

  /**
   * 用户名唯一性检查
   * 
   * @param user
   * @param req
   * @return
   */
  @RequestMapping(params = "checkUserNameExist", method = RequestMethod.POST)
  @ResponseBody
  public AjaxJson checkUserNameExist(String userName) {

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    AjaxJson j = new AjaxJson();

    String userNameInDataBase = comp.getCode() + userName;

    logger.info(userNameInDataBase);

    List<Object> result =
        systemService.findHql("select id from TSBaseUser where userName=?", userNameInDataBase);

    if (result.isEmpty()) {
      // 不存在
      j.setObj(0);
    } else {
      // 存在
      j.setObj(1);
    }

    return j;
  }

  /**
   * 账户唯一性检查
   * 
   * @param user
   * @param req
   * @return
   */
  @RequestMapping(params = "checkTradeAccountExist", method = RequestMethod.POST)
  @ResponseBody
  public AjaxJson checkTradeAccountExist(String tradeAccount) {

    // get user company
    FsCustomerCompany comp = ResourceUtil.getSessionUserComp();

    AjaxJson j = new AjaxJson();



    List<Object> result = systemService.findHql(
        "select id from FsCustomerCompanyDeskBook where tradeAccount=? and acountNo=? ",
        tradeAccount, comp.getAcountNo());

    if (result.isEmpty()) {
      // 不存在
      j.setObj(0);
    } else {
      // 存在
      j.setObj(1);
    }

    return j;
  }

}
