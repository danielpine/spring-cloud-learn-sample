/**
 * ===========================================
 * <p>
 * Copyright (C) 2018 Finanstar
 * <p>
 * All rights reserved
 * <p>
 * <p>
 * 项 目 名： deri-web
 * <p>
 * 文 件 名： BasicSetController.java
 * <p>
 * 版本信息： V1.0.0
 * <p>
 * 作 者： Daniel Pine
 * <p>
 * 日 期： 2018年6月25日-上午10:12:07
 * 
 * ============================================
 */

package com.finanstar.basicset.controller;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.log4j.Logger;
import org.jeecgframework.core.common.controller.BaseController;
import org.jeecgframework.core.util.ResourceUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import com.finanstar.basicset.controller.vo.VolForm;
import com.finanstar.basicset.service.BasicSetService;
import com.finanstar.calendar.entity.CalendarEntity;
import com.finanstar.calendar.entity.HolidayEntity;
import com.finanstar.eqcm.entity.MarketAdjEqcmEntity;
import com.finanstar.eqcm.entity.MarketConvEqcmEntity;
import com.finanstar.eqcm.entity.MartketInstrEqcmEntity;
import com.finanstar.fx.entity.FxVolDefContentEntity;
import com.finanstar.fx.entity.MarketConvFxEntity;
import com.finanstar.marketconv.swap.entity.MarketConvSwapEntity;
import com.finanstar.marketconv.swap.service.MarketConvSwapServiceI;
import com.finanstar.marketinstrs.entity.MarketInstrsEntity;
import com.finanstar.rate.data.service.DataRateServiceI;
import com.finanstar.rate.swt.entity.MarketAdjVolEntity;
import com.finanstar.rate.swt.entity.MarketVolContentEntity;
import com.finanstar.rate.swt.entity.MarketVolDataEntity;

/**
 * @描 述：
 * @author:Daniel Pine
 * @联系方式:danielpine@sina.com
 * @date :2018年6月25日-上午10:12:07
 */
@Controller
@RequestMapping("/basicSetController")
public class BasicSetController extends BaseController {
  /**
   * Logger for this class
   */
  private static final Logger logger = Logger.getLogger(BasicSetController.class);

  @Autowired
  private BasicSetService basicSetService;
  @Autowired
  private DataRateServiceI dataRateService;
  @Autowired
  private MarketConvSwapServiceI mar;

  @RequestMapping(params = "conv")
  public ModelAndView conv(String dealType, HttpServletRequest request,
      HttpServletResponse response) {

    // MarketConvEqcmEntity

    if (dealType == null) {
      dealType = "EQCM";
    }

    ModelAndView mv =
        new ModelAndView("com/finanstar/basicset/conv/convlist" + dealType.toLowerCase());

    List<?> convList = null;

    if ("EQCM".equals(dealType)) {
      convList = basicSetService.getList(MarketConvEqcmEntity.class);
    } else if ("FX".equals(dealType)) {
      convList = basicSetService.getList(MarketConvFxEntity.class);
    } else if ("SWAP".equals(dealType)) {
      convList = basicSetService.getList(MarketConvSwapEntity.class);
    }
    mv.addObject("dealType", dealType);
    mv.addObject("convList", convList);

    return mv;

  }

  /**
   * 
   * @方法描述： 更新市场工具
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年8月9日-下午12:37:58
   * @return
   */
  @SuppressWarnings("unused")
  @RequestMapping(params = "updateinstr")
  public ModelAndView updateinstr(String flag,String dealType, String id, String thisMarket, String newType,
      HttpServletRequest request, HttpServletResponse response)
      throws IllegalAccessException, InvocationTargetException {

    String f =(String) request.getSession().getAttribute("flag");
    
    if(f.equals(flag)){


    // update instr
    switch (dealType) {
      case "EQCM":
        MartketInstrEqcmEntity istr = basicSetService.get(MartketInstrEqcmEntity.class, id);
        thisMarket = istr.getMarket();
        BeanUtils.populate(istr, request.getParameterMap());
        break;
      case "FX":
      case "SWAP":
        MarketInstrsEntity istrs = basicSetService.get(MarketInstrsEntity.class, id);
        BeanUtils.populate(istrs, request.getParameterMap());
        thisMarket = istrs.getMarket();
        break;
      default:

        break;
    }
    }

    ////////////////////////////////////
    System.out.println(dealType);
    ModelAndView mv = new ModelAndView("com/finanstar/basicset/instr/instrlist");

    mv.addObject("dealType", dealType);

    // List<MartketInstrEqcmEntity> instrList =
    // basicSetService.getList(MartketInstrEqcmEntity.class);

    // TODO 和产品表联动
    List<String> typeList = new ArrayList<>();
    typeList.add("FX");
    typeList.add("SWAP");
    typeList.add("EQCM");
    List<?> instrList = null;
    List<?> martketList = null;

    switch (dealType) {
      case "EQCM":
        martketList =
            basicSetService.findHql("select name from MarketConvEqcmEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService
            .findHql("from MartketInstrEqcmEntity where market=? order by tenor", thisMarket);
        break;
      case "FX":
        martketList = basicSetService
            .findHql("select marketName from MarketConvFxEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService.findHql(
            "from MarketInstrsEntity where type=? and market=? order by cast(num as integer)",
            dealType, thisMarket);
        break;
      case "SWAP":
        martketList = basicSetService
            .findHql("select marketId from MarketConvSwapEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService.findHql(
            "from MarketInstrsEntity where type=? and market=? order by cast(num as integer)",
            dealType, thisMarket);
        break;
      default:
        break;
    }

    mv.addObject("instrList", instrList);
    // TODO 市场非空判断
    mv.addObject("martketList", martketList);

    mv.addObject("thisMarket", thisMarket);

    mv.addObject("typeList", typeList);

    mv.addObject("lastModId", id);

    return mv;

  }


  /**
   * 
   * @方法描述： 增加市场工具
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年8月9日-下午12:37:58
   * @return
   */
  @SuppressWarnings("unused")
  @RequestMapping(params = "addinstr")
  public ModelAndView addinstr(String dealType, String id, String thisMarket, String newType,
      HttpServletRequest request, HttpServletResponse response)
      throws IllegalAccessException, InvocationTargetException {


    // update instr
    switch (dealType) {
      case "EQCM":
        MartketInstrEqcmEntity istr = new MartketInstrEqcmEntity();
        BeanUtils.populate(istr, request.getParameterMap());
        System.out.println(istr);
        thisMarket=istr.getMarket();
        id=(String) basicSetService.save(istr);
        break;
      case "FX":
      case "SWAP":
        MarketInstrsEntity istrs = new MarketInstrsEntity();
        BeanUtils.populate(istrs, request.getParameterMap());
        System.out.println(istrs);
        istrs.setType(dealType);
        thisMarket=istrs.getMarket();
        id=(String) basicSetService.save(istrs);
        break;
      default:
        break;
    }


    ////////////////////////////////////
    System.out.println(dealType);
    ModelAndView mv = new ModelAndView("com/finanstar/basicset/instr/instrlist");

    mv.addObject("dealType", dealType);

    // List<MartketInstrEqcmEntity> instrList =
    // basicSetService.getList(MartketInstrEqcmEntity.class);

    // TODO 和产品表联动
    List<String> typeList = new ArrayList<>();
    typeList.add("FX");
    typeList.add("SWAP");
    typeList.add("EQCM");
    List<?> instrList = null;
    List<?> martketList = null;

    switch (dealType) {
      case "EQCM":
        martketList =
            basicSetService.findHql("select name from MarketConvEqcmEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService
            .findHql("from MartketInstrEqcmEntity where market=? order by tenor", thisMarket);
        break;
      case "FX":
        martketList = basicSetService
            .findHql("select marketName from MarketConvFxEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService.findHql(
            "from MarketInstrsEntity where type=? and market=? order by cast(num as integer)",
            dealType, thisMarket);
        break;
      case "SWAP":
        martketList = basicSetService
            .findHql("select marketId from MarketConvSwapEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService.findHql(
            "from MarketInstrsEntity where type=? and market=? order by cast(num as integer)",
            dealType, thisMarket);
        break;
      default:
        break;
    }

    mv.addObject("instrList", instrList);
    // TODO 市场非空判断
    mv.addObject("martketList", martketList);

    mv.addObject("thisMarket", thisMarket);

    mv.addObject("typeList", typeList);

    mv.addObject("lastModId", id);

    return mv;

  }

  /**
   * 
   * @方法描述： 查询市场工具
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年8月9日-下午12:38:26
   * @return
   */
  @RequestMapping(params = "instr")
  public ModelAndView instr(String dealType, String newType, String thisMarket,
      HttpServletRequest request, HttpServletResponse response) {

    // MarketConvEqcmEntity

    System.out.println(dealType);
    if (thisMarket != null) {
      thisMarket = newType.equals("1") ? null : thisMarket;
    }

    if (dealType == null) {
      dealType = "EQCM";
    }
    ModelAndView mv = new ModelAndView("com/finanstar/basicset/instr/instrlist");

    mv.addObject("dealType", dealType);

    // List<MartketInstrEqcmEntity> instrList =
    // basicSetService.getList(MartketInstrEqcmEntity.class);

    // TODO 和产品表联动
    List<String> typeList = new ArrayList<>();
    typeList.add("FX");
    typeList.add("SWAP");
    typeList.add("EQCM");
    List<?> instrList = null;
    List<?> martketList = null;

    switch (dealType) {
      case "EQCM":
        martketList =
            basicSetService.findHql("select name from MarketConvEqcmEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService
            .findHql("from MartketInstrEqcmEntity where market=? order by tenor", thisMarket);
        break;
      case "FX":
        martketList = basicSetService
            .findHql("select marketName from MarketConvFxEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService.findHql(
            "from MarketInstrsEntity where type=? and market=? order by cast(num as integer)",
            dealType, thisMarket);
        break;
      case "SWAP":
        martketList = basicSetService
            .findHql("select marketId from MarketConvSwapEntity where active=?", "Yes");
        if (thisMarket == null || thisMarket.equals("")) {
          thisMarket = (String) martketList.get(0);
        }
        System.out.println(thisMarket);
        instrList = basicSetService.findHql(
            "from MarketInstrsEntity where type=? and market=? order by cast(num as integer)",
            dealType, thisMarket);
        break;
      default:
        break;
    }

    mv.addObject("instrList", instrList);
    // TODO 市场非空判断
    mv.addObject("martketList", martketList);

    mv.addObject("thisMarket", thisMarket);

    mv.addObject("typeList", typeList);

    return mv;

  }

  /**
   * 
   * @方法描述：假期查询页面
   * @作 者： Daniel Pine
   * @日 期： 2018年7月23日-下午5:51:49
   * @return
   */
  @RequestMapping(params = "holiday")
  public ModelAndView holiday(String queryCalendar, HttpServletRequest request,
      HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("com/finanstar/basicset/calendar_holiday/holiday");

    // 从台历表找出所有台历，按台历查询假期
    List<CalendarEntity> calendarList = basicSetService.getList(CalendarEntity.class);
    if (!calendarList.isEmpty()) {
      // 当前查询台历为空
      if (queryCalendar == null || "".equals(queryCalendar)) {
        queryCalendar = calendarList.get(0).getCalid();
      }
    } else {
      // 台历为空
    }

    // 从假期表找出假期

    List<HolidayEntity> holidayList =
        basicSetService.findHql("from HolidayEntity where calid=? and type=? order by date",
            queryCalendar, ResourceUtil.HOLIDAY_CODE);
    List<HolidayEntity> workHolidayList =
        basicSetService.findHql("from HolidayEntity where calid=? and type=? order by date",
            queryCalendar, ResourceUtil.WORK_HOLIDAY_CODE);

    // basicSetService

    mv.addObject("calendarList", calendarList);
    mv.addObject("queryCalendar", queryCalendar);
    mv.addObject("holidayList", holidayList);
    mv.addObject("workHolidayList", workHolidayList);

    return mv;

  }

  /**
   * 
   * @方法描述： 采用spring提供的上传文件的方法
   * 
   * @作 者： Daniel Pine
   * @日 期： 2018年8月9日-下午12:38:54
   * @return
   */
  @RequestMapping(params = "addHolidayBytxt")
  public void springUpload(HttpServletRequest request, HttpServletResponse response)
      throws IllegalStateException, IOException, ServletException {

    // TODO 并发控制
    String path = null;
    long startTime = System.currentTimeMillis();
    // 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
    CommonsMultipartResolver multipartResolver =
        new CommonsMultipartResolver(request.getSession().getServletContext());
    // 检查form中是否有enctype="multipart/form-data"
    if (multipartResolver.isMultipart(request)) {
      // 将request变成多部分request
      MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
      // 获取multiRequest 中所有的文件名
      Iterator<String> iter = multiRequest.getFileNames();

      while (iter.hasNext()) {
        // 一次遍历所有文件
        MultipartFile file = multiRequest.getFile(iter.next().toString());
        if (file != null) {
          InputStream fs = file.getInputStream();

          String processResult = basicSetService.processHolidayTxt(fs);

        }
      }
    }
    long endTime = System.currentTimeMillis();

    logger.info("运行时间：" + String.valueOf(endTime - startTime) + "ms");

    // 文件上传完成

    response.sendRedirect("/deri-web/basicSetController.do?holiday");

  }

  @RequestMapping(params = "adj")
  public ModelAndView adj(VolForm volForm, HttpServletRequest request,
      HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("com/finanstar/basicset/adj/adj");
    List<String> typeList = new ArrayList<>();
    typeList.add("EQCM");
    typeList.add("FX");
    typeList.add("SWAP");
    mv.addObject("typeList", typeList);
    // MarketConvEqcmEntity

    if (volForm.getType() == null || volForm.getType().equals("EQCM")) {
      List<MarketConvEqcmEntity> mkts = new ArrayList<>();
      mkts =
          basicSetService.findHql("from MarketConvEqcmEntity where active=? order by name", "Yes");
      List<String> marList = new ArrayList<>();
      for (MarketConvEqcmEntity m : mkts) {
        marList.add(m.getName());
      }
      if (volForm.getMarket() == null || !marList.contains(volForm.getMarket())) {
        volForm = new VolForm();
        volForm.setMarket(mkts.get(0).getName());
        volForm.setType("EQCM");

      }

      mv.addObject("mkts", mkts);

      mv.addObject("volForm", volForm);

      List<MarketAdjEqcmEntity> adjs =
          basicSetService.findHql("from MarketAdjEqcmEntity where market=?", volForm.getMarket());
      mv.addObject("adjs", adjs);
    } else if (volForm.getType().equals("SWAP")) {
      List<MarketConvSwapEntity> mkts =
          mar.findHql("from MarketConvSwapEntity where active=?", "Yes");
      List<String> marketList = mar.getMarketList();
      if (!marketList.contains(volForm.getMarket())) {
        volForm = new VolForm();
        volForm.setMarket(mkts.get(0).getMarketId());
        volForm.setType("SWAP");
      }

      List<MarketAdjVolEntity> SwapAdjList =
          dataRateService.findSwapAdjByMarket(volForm.getMarket());

      List<MarketAdjVolEntity> swtAdjList = new ArrayList<>();
      List<MarketAdjVolEntity> capAdjList = new ArrayList<>();
      for (int i = 0; i < SwapAdjList.size(); i++) {
        if (SwapAdjList.get(i).getType().equals("swtvol")) {
          swtAdjList.add(SwapAdjList.get(i));
        } else {
          capAdjList.add(SwapAdjList.get(i));
        }
      }
      Map<String, String> volMap = new LinkedHashMap<>();
      List<String> col = new ArrayList<>();
      List<String> row = new ArrayList<>();

      for (MarketAdjVolEntity vol : swtAdjList) {
        String r = vol.getRow();
        String c = vol.getCol();
        String v = vol.getValue();
        volMap.put(r + "~" + c, v);
        if (!col.contains(c))
          col.add(c);
        if (!row.contains(r))
          row.add(r);
      }
      mv.addObject("width", row.size() * 130);
      mv.addObject("height", col.size() * 35);
      mv.addObject("volMap", volMap);
      mv.addObject("col", col);
      mv.addObject("row", row);
      Map<String, String> volMapCap = new LinkedHashMap<>();
      List<String> colCap = new ArrayList<>();
      List<String> rowCap = new ArrayList<>();
      for (MarketAdjVolEntity vol : capAdjList) {
        String r = vol.getAdjType();
        String c = vol.getCol();
        String v = vol.getValue();
        volMapCap.put(r + "~" + c, v);
        if (!colCap.contains(c))
          colCap.add(c);
        if (!rowCap.contains(r))
          rowCap.add(r);
      }
      mv.addObject("volMapCap", volMapCap);
      mv.addObject("colCap", colCap);
      mv.addObject("rowCap", rowCap);
      mv.addObject("widthCap", rowCap.size() * 130);
      mv.addObject("heightCap", colCap.size() * 35);
      mv.addObject("mkts", mkts);

      mv.addObject("volForm", volForm);

      mv.addObject("title", "NormVol");
    }

    // List<MartketInstrEqcmEntity> instrList =
    // basicSetService.getList(MartketInstrEqcmEntity.class);

    return mv;

  }

  @SuppressWarnings("null")
  @RequestMapping(params = "voldata")
  public ModelAndView voldata(VolForm volForm, HttpServletRequest request,
      HttpServletResponse response) {
    ModelAndView mv = new ModelAndView("com/finanstar/basicset/vol/voldata");
    List<String> typeList = new ArrayList<>();
    typeList.add("EQCM");
    typeList.add("FX");
    typeList.add("SWAP");
    mv.addObject("typeList", typeList);
    // FxVolDefContentEntity FxVolDataEntity

    if (volForm.getType() == null || volForm.getType().equals("EQCM")) {
      List<String> dates = new ArrayList<>();
      List<MarketConvEqcmEntity> mkts = new ArrayList<>();
      dates = basicSetService.findHql(
          "select distinct fxVolDate from FxVolDataEntity order where fxVolDefId like ? order by fxVolDate desc",
          "eqcm%");
      mkts =
          basicSetService.findHql("from MarketConvEqcmEntity where active=? order by name", "Yes");
      List<String> marList = new ArrayList<>();
      for (MarketConvEqcmEntity m : mkts) {
        marList.add(m.getName());
      }
      if (volForm.getMarket() == null || !marList.contains(volForm.getMarket())) {
        volForm = new VolForm();
        volForm.setDate(dates.get(0));
        volForm.setMarket(mkts.get(0).getName());
        volForm.setType("EQCM");

      }
      mv.addObject("dates", dates);

      mv.addObject("mkts", mkts);

      mv.addObject("volForm", volForm);

      mv.addObject("title", "Days/Vol");
    } else if (volForm.getType().equals("FX")) {
      List<String> dates = new ArrayList<>();
      List<MarketConvFxEntity> mkts = new ArrayList<>();
      dates = basicSetService.findHql(
          "select distinct fxVolDate from FxVolDataEntity where fxVolDefId like ? order by fxVolDate desc",
          "fx%");
      mkts = basicSetService.findHql("from MarketConvFxEntity where active=? order by marketName",
          "Yes");
      List<String> marList = new ArrayList<>();
      for (MarketConvFxEntity m : mkts) {
        marList.add(m.getMarketName());
      }
      if (volForm.getMarket() == null || !marList.contains(volForm.getMarket())) {
        volForm = new VolForm();
        volForm.setDate(dates.get(0));
        volForm.setMarket(mkts.get(0).getMarketName());
        volForm.setType("FX");

      }
      mv.addObject("dates", dates);

      mv.addObject("mkts", mkts);

      mv.addObject("volForm", volForm);

      mv.addObject("title", "FxVol");
    } else if (volForm.getType().equals("SWAP")) {

      List<String> dates = dataRateService.findHql(
          "select distinct marketVolDate from MarketVolDataEntity order by marketVolDate desc");
      List<MarketConvSwapEntity> mkts =
          mar.findHql("from MarketConvSwapEntity where active=?", "Yes");
      List<String> marketList = mar.getMarketList();
      if (!marketList.contains(volForm.getMarket())) {

        volForm = new VolForm();
        volForm.setDate(dates.get(0));
        volForm.setMarket(mkts.get(0).getMarketId());
        volForm.setType("SWAP");
      }
      mv.addObject("dates", dates);

      mv.addObject("mkts", mkts);

      mv.addObject("volForm", volForm);

      mv.addObject("title", "NormVol");
    }

    // List<MartketInstrEqcmEntity> instrList =
    // basicSetService.getList(MartketInstrEqcmEntity.class);

    /*
     * List<MartketInstrEqcmEntity> instrList =
     * basicSetService.findHql("from FxVolDataEntity where fxVolContentId=?", "eqcmvol_" +
     * volForm.getDate().replaceAll("-", "") + "_" + volForm.getMarket().toLowerCase());
     */

    Map<String, String> volMap = new LinkedHashMap<>();
    List<String> col = new ArrayList<>();
    List<String> row = new ArrayList<>();

    if (volForm.getType().equals("EQCM") || volForm.getType().equals("FX")) {
      List<FxVolDefContentEntity> volList = basicSetService.findHql(
          "from FxVolDefContentEntity where contentid=?", volForm.getType().toLowerCase() + "vol_"
              + volForm.getDate().replaceAll("-", "") + "_" + volForm.getMarket().toLowerCase());
      for (FxVolDefContentEntity vol : volList) {
        String r = vol.getRow();
        String c = vol.getCol();
        String v = vol.getValue();
        volMap.put(r + "~" + c, v);
        if (!col.contains(c))
          col.add(c);
        if (!row.contains(r))
          row.add(r);
      }
    } else if (volForm.getType().equals("SWAP")) {
      MarketVolDataEntity voldata = dataRateService.findMarketVolDataByDate(
          volForm.getDate().replaceAll("-", ""), "%swtvol%", "%" + volForm.getMarket() + "%");
      if (voldata == null) {
        return mv.addObject("msg", "没有数据");
      }
      List<MarketVolContentEntity> dataList =
          dataRateService.findAllVolByContentid(voldata.getMarketVolContentId());
      for (MarketVolContentEntity vol : dataList) {
        String r = vol.getRow();
        String c = vol.getCol();
        String v = vol.getValue();
        volMap.put(r + "~" + c, v);
        if (!col.contains(c))
          col.add(c);
        if (!row.contains(r))
          row.add(r);
      }
      MarketVolDataEntity voldataCap = dataRateService.findMarketVolDataByDate(
          volForm.getDate().replaceAll("-", ""), "%capvol%", "%" + volForm.getMarket() + "%");
      if (voldataCap == null) {
        return mv.addObject("msg", "没有数据");
      }
      List<MarketVolContentEntity> dataListCap =
          dataRateService.findAllVolByContentid(voldataCap.getMarketVolContentId());
      Map<String, String> volMapCap = new LinkedHashMap<>();
      List<String> colCap = new ArrayList<>();
      List<String> rowCap = new ArrayList<>();
      for (MarketVolContentEntity vol : dataListCap) {
        String r = vol.getRow();
        String c = vol.getCol().replaceAll("/", "\\.");
        String v = vol.getValue();
        volMapCap.put(r + "~" + c, v);
        if (!colCap.contains(c))
          colCap.add(c);
        if (!rowCap.contains(r))
          rowCap.add(r);
      }
      mv.addObject("volMapCap", volMapCap);
      mv.addObject("colCap", colCap);
      mv.addObject("rowCap", rowCap);
      mv.addObject("widthCap", rowCap.size() * 130);
      mv.addObject("heightCap", colCap.size() * 35);
    } else {
      return mv.addObject("msg", "没有数据");
    }


    mv.addObject("width", row.size() * 130);
    mv.addObject("height", col.size() * 35);
    mv.addObject("volMap", volMap);
    mv.addObject("col", col);
    mv.addObject("row", row);

    return mv;

  }

  @RequestMapping(params = "addorupdateconv")
  public ModelAndView addconv(HttpServletRequest request, HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("com/finanstar/basicset/conv/convlist");

    return mv;

  }

  @RequestMapping(params = "rateAdj")
  public ModelAndView addRateAdj(HttpServletRequest request, HttpServletResponse response) {

    ModelAndView mv = new ModelAndView("com/finanstar/basicset/adj/adj");

    return mv;

  }

}
