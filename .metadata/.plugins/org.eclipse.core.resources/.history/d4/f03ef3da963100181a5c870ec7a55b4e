package com.finanstar.fx.service.impl;

import com.finanstar.fx.service.FxFxoEntityServiceI;

import net.sf.json.JSONObject;

import org.jeecgframework.core.common.service.impl.CommonServiceImpl;
import com.finanstar.fx.entity.FxFxoEntityEntity;
import com.finanstar.fx.entity.FxVolDataEntity;
import com.finanstar.fx.entity.FxVolDefContentEntity;
import com.finanstar.fx.entity.FxVolDefEntity;
import com.finanstar.fx.entity.MarketStandardDataEntity;
import com.finanstar.fx.json.Json;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.Serializable;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import org.jeecgframework.core.util.ApplicationContextUtil;
import org.jeecgframework.core.util.MyClassLoader;
import org.jeecgframework.core.util.StringUtil;
import org.jeecgframework.web.cgform.enhance.CgformEnhanceJavaInter;

@Service("fxFxoEntityService")
@Transactional
public class FxFxoEntityServiceImpl extends CommonServiceImpl implements FxFxoEntityServiceI {


  public void delete(FxFxoEntityEntity entity) throws Exception {
    super.delete(entity);
    // 执行删除操作增强业务
    this.doDelBus(entity);
  }

  public Serializable save(FxFxoEntityEntity entity) throws Exception {
    Serializable t = super.save(entity);
    // 执行新增操作增强业务
    this.doAddBus(entity);
    return t;
  }

  public void saveOrUpdate(FxFxoEntityEntity entity) throws Exception {
    super.saveOrUpdate(entity);
    // 执行更新操作增强业务
    this.doUpdateBus(entity);
  }

  /**
   * 新增操作增强业务
   * 
   * @param t
   * @return
   */
  private void doAddBus(FxFxoEntityEntity t) throws Exception {
    // -----------------sql增强 start----------------------------
    // -----------------sql增强 end------------------------------

    // -----------------java增强 start---------------------------
    // -----------------java增强 end-----------------------------
  }

  /**
   * 更新操作增强业务
   * 
   * @param t
   * @return
   */
  private void doUpdateBus(FxFxoEntityEntity t) throws Exception {
    // -----------------sql增强 start----------------------------
    // -----------------sql增强 end------------------------------

    // -----------------java增强 start---------------------------
    // -----------------java增强 end-----------------------------
  }

  /**
   * 删除操作增强业务
   * 
   * @param id
   * @return
   */
  private void doDelBus(FxFxoEntityEntity t) throws Exception {
    // -----------------sql增强 start----------------------------
    // -----------------sql增强 end------------------------------

    // -----------------java增强 start---------------------------
    // -----------------java增强 end-----------------------------
  }

  private Map<String, Object> populationMap(FxFxoEntityEntity t) {
    Map<String, Object> map = new HashMap<String, Object>();
    map.put("id", t.getId());
    map.put("create_name", t.getCreateName());
    map.put("create_by", t.getCreateBy());
    map.put("create_date", t.getCreateDate());
    map.put("update_name", t.getUpdateName());
    map.put("update_by", t.getUpdateBy());
    map.put("update_date", t.getUpdateDate());
    map.put("sys_org_code", t.getSysOrgCode());
    map.put("sys_company_code", t.getSysCompanyCode());
    map.put("bpm_status", t.getBpmStatus());
    map.put("tradeserial", t.getTradeserial());
    map.put("market", t.getMarket());
    map.put("valuedate", t.getValuedate());
    map.put("resched", t.getResched());
    map.put("notionalfirst", t.getNotionalfirst());
    map.put("ccyfirst", t.getCcyfirst());
    map.put("strike", t.getStrike());
    map.put("notionalsecond", t.getNotionalsecond());
    map.put("ccysecond", t.getCcysecond());
    map.put("buysell", t.getBuysell());
    map.put("callput", t.getCallput());
    map.put("unwdate", t.getUnwdate());
    map.put("effdate", t.getEffdate());
    map.put("expdate", t.getExpdate());
    map.put("expdatelag", t.getExpdatelag());
    map.put("cuttime", t.getCuttime());
    map.put("cuttimecaledar", t.getCuttimecaledar());
    map.put("paydate", t.getPaydate());
    map.put("calendar", t.getCalendar());
    map.put("setmethod", t.getSetmethod());
    map.put("setindex", t.getSetindex());
    map.put("optstatus", t.getOptstatus());
    return map;
  }

  /**
   * 替换sql中的变量
   * 
   * @param sql
   * @param t
   * @return
   */
  public String replaceVal(String sql, FxFxoEntityEntity t) {
    sql = sql.replace("#{id}", String.valueOf(t.getId()));
    sql = sql.replace("#{create_name}", String.valueOf(t.getCreateName()));
    sql = sql.replace("#{create_by}", String.valueOf(t.getCreateBy()));
    sql = sql.replace("#{create_date}", String.valueOf(t.getCreateDate()));
    sql = sql.replace("#{update_name}", String.valueOf(t.getUpdateName()));
    sql = sql.replace("#{update_by}", String.valueOf(t.getUpdateBy()));
    sql = sql.replace("#{update_date}", String.valueOf(t.getUpdateDate()));
    sql = sql.replace("#{sys_org_code}", String.valueOf(t.getSysOrgCode()));
    sql = sql.replace("#{sys_company_code}", String.valueOf(t.getSysCompanyCode()));
    sql = sql.replace("#{bpm_status}", String.valueOf(t.getBpmStatus()));
    sql = sql.replace("#{tradeserial}", String.valueOf(t.getTradeserial()));
    sql = sql.replace("#{market}", String.valueOf(t.getMarket()));
    sql = sql.replace("#{valuedate}", String.valueOf(t.getValuedate()));
    sql = sql.replace("#{resched}", String.valueOf(t.getResched()));
    sql = sql.replace("#{notionalfirst}", String.valueOf(t.getNotionalfirst()));
    sql = sql.replace("#{ccyfirst}", String.valueOf(t.getCcyfirst()));
    sql = sql.replace("#{strike}", String.valueOf(t.getStrike()));
    sql = sql.replace("#{notionalsecond}", String.valueOf(t.getNotionalsecond()));
    sql = sql.replace("#{ccysecond}", String.valueOf(t.getCcysecond()));
    sql = sql.replace("#{buysell}", String.valueOf(t.getBuysell()));
    sql = sql.replace("#{callput}", String.valueOf(t.getCallput()));
    sql = sql.replace("#{unwdate}", String.valueOf(t.getUnwdate()));
    sql = sql.replace("#{effdate}", String.valueOf(t.getEffdate()));
    sql = sql.replace("#{expdate}", String.valueOf(t.getExpdate()));
    sql = sql.replace("#{expdatelag}", String.valueOf(t.getExpdatelag()));
    sql = sql.replace("#{cuttime}", String.valueOf(t.getCuttime()));
    sql = sql.replace("#{cuttimecaledar}", String.valueOf(t.getCuttimecaledar()));
    sql = sql.replace("#{paydate}", String.valueOf(t.getPaydate()));
    sql = sql.replace("#{calendar}", String.valueOf(t.getCalendar()));
    sql = sql.replace("#{setmethod}", String.valueOf(t.getSetmethod()));
    sql = sql.replace("#{setindex}", String.valueOf(t.getSetindex()));
    sql = sql.replace("#{optstatus}", String.valueOf(t.getOptstatus()));
    sql = sql.replace("#{UUID}", UUID.randomUUID().toString());
    return sql;
  }

  /**
   * 执行JAVA增强
   */
  private void executeJavaExtend(String cgJavaType, String cgJavaValue, Map<String, Object> data)
      throws Exception {
    if (StringUtil.isNotEmpty(cgJavaValue)) {
      Object obj = null;
      try {
        if ("class".equals(cgJavaType)) {
          // 因新增时已经校验了实例化是否可以成功，所以这块就不需要再做一次判断
          obj = MyClassLoader.getClassByScn(cgJavaValue).newInstance();
        } else if ("spring".equals(cgJavaType)) {
          obj = ApplicationContextUtil.getContext().getBean(cgJavaValue);
        }
        if (obj instanceof CgformEnhanceJavaInter) {
          CgformEnhanceJavaInter javaInter = (CgformEnhanceJavaInter) obj;
          javaInter.execute("fx_fxo", data);
        }
      } catch (Exception e) {
        e.printStackTrace();
        throw new Exception("执行JAVA增强出现异常！");
      }
    }
  }

  @Override
  public void packageFxoCurveVolToJson(FxFxoEntityEntity entity) throws Exception {
    // market name
    String PricerFx = "PricerFx";
    String Version = "Version";
    String Market = "Market";
    String market = entity.getMarket();
    SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd");
    String ValueDate=sdf.format(entity.getValuedate());
    String EffDate=sdf.format(entity.getEffdate());
    String ExpDate=sdf.format(entity.getExpdate());
    String PayDate=sdf.format(entity.getPaydate());
    // fxo json object
    Json j = new Json(PricerFx);
    j.addElement(Version, "101");
    j.addElement(Market, market);

    j.addElement("ValueDate", ValueDate);
    j.addElement("Job", "Risk");
    j.addElement("ReturnTrade", "Yes");
    j.addElement("ReturnCurve", "Yes");
    j.addElement("AccrualDay", "0");
    // No.1
    Json j11 = j.addElement("DealSet");
    if (entity.getResched() == null) {
      j11.addElement("ReSched", "No");
    } else {
      j11.addElement("ReSched", "Yes");
    }
    j11.addElement("NumDeal", "1");
    Json j111 = j11.addElement("Deal.0");
    j111.addElement("DealId", "New");
    j111.addElement("DealType", "FX_OPTN");
    j111.addElement("Msgs", "");
    Json j1111 = j111.addElement("TradeTerm");
    j1111.addElement("DealType", "FX_OPTN");
    j1111.addElement("Market", market);
    j1111.addElement("Notional1", entity.getNotionalfirst());
    j1111.addElement("Strike", entity.getStrike());
    j1111.addElement("Tenor", entity.getExpdatelag());
    j1111.addElement("EffDate", EffDate);
    j1111.addElement("ExpDate", ExpDate);
    j1111.addElement("CutTime", entity.getCuttime());
    j1111.addElement("CutCity", entity.getCuttimecaledar());
    j1111.addElement("PayDate", PayDate);
    j1111.addElement("Calendar", entity.getCalendar());
    j1111.addElement("BuySell", entity.getBuysell());
    j1111.addElement("CallPut", entity.getCallput());
    j1111.addElement("UnwindDate", "");
    j1111.addElement("SetMethod", entity.getSetmethod());
    j1111.addElement("SetIndex", entity.getSetindex());
    j1111.addElement("OptStatus", entity.getOptstatus());
    // No.2
    Json j12 = j.addElement("CurveDefine");

    // 查询市场惯例

    j12.addElement("NumCrv", 2);
    // 曲线1
    Json j121 = j12.addElement("CrvDef0");
    j121.addElement(Market, market);
    j121.addElement("StaDate", ValueDate);
    // select * from market_standard_data where pro_type='FX' and market='USDCNY' and
    // data_date='20170425';
    // select * from market_standard_data where pro_type='FX' and market='USDCNY' and
    // data_date='20170425'and tenor not in ('0D.LO','0D.F','ON','TN','0D.HI') order by value;
    Json j1211 = j121.addElement("Instr");


    List<Object> CrvDef0 = super.findHql(
        "from MarketStandardDataEntity where proType=? and market=? and dataDate=? order by value",
        "FX", market, ValueDate);
    // tenor "+ "not in ('0D.LO','0D.F','ON','TN','0D.HI')
    List<MarketStandardDataEntity> c0 = new ArrayList<>();
    for (Object m : CrvDef0) {
      MarketStandardDataEntity n = (MarketStandardDataEntity) m;
      System.out.println(n);
      switch (n.getTenor()) {
        case "0D.LO":
          //
        case "0D.F":
          //
        case "ON":
          //
        case "TN":
          //
        case "0D.HI":
          break;
        default:
          c0.add(n);
          break;
      }
    }
    System.out.println(c0);
    j1211.addElement("Num", c0.size());


    for (int i = 0; i < c0.size(); i++) {
      String line = market + "_" + c0.get(i).getTenor() + "~" + c0.get(i).getValue();
      j1211.addElement("P." + i, line);
    }



    // 曲线2
    //
    String discntMarket = findDiscntMarketByMarketname(market);
    Json j122 = j12.addElement("CrvDef1");
    List<Object> CrvDef1 = super.findHql(
        "from MarketStandardDataEntity where proType=? and market=? and dataDate=? order by value",
        "SWAP", discntMarket, ValueDate);
    j122.addElement("Market", discntMarket);
    j122.addElement("StaDate", ValueDate);
    Json j1221 = j122.addElement("Instr");
    j1221.addElement("Num", CrvDef1.size() + 1);// 不知道7D从哪里来
    j1221.addElement("P.0", "CNYFR_7D~3.44");
    List<MarketStandardDataEntity> c1 = new ArrayList<>();
    for (Object m : CrvDef1) {
      MarketStandardDataEntity n = (MarketStandardDataEntity) m;
      c1.add(n);
    }
    for (int i = 1; i <= c1.size(); i++) {
      String line = discntMarket + "_" + c1.get(i-1).getTenor() + "~" + c1.get(i-1).getValue();
      j1221.addElement("P." + i, line);
    }

    // No.3
    Json j13 = j.addElement("ModelPair");

    // FIND VOL
   
    FxVolDataEntity voldata = findVolDataAndVolDefByDate(ValueDate);

    j13.addElement("Type", "FXBS");
    j13.addElement("HasVega", "No");
    Json j131 = j13.addElement("Model");
    j131.addElement("Version", "101");
    j131.addElement("ModelType", "FXBS");
    Json j1311 = j131.addElement("MarketVol");
    System.out.println(voldata);
    System.out.println();
    FxVolDefEntity def = findVolDefByContentid(voldata.getFxVolDefId());
    System.out.println(def);
    j1311.addElement(Market, def.getMarket());
    j1311.addElement("StaDate", voldata.getFxVolDate());
    j1311.addElement("VolType", def.getVoltype());
    j1311.addElement("InstType", def.getIntsr());

    List<FxVolDefContentEntity> dataList = queryAllVolByContentid(voldata.getFxVolContentId());
    HashSet<String> colset = new LinkedHashSet<String>();
    HashSet<String> rowset = new LinkedHashSet<String>();
    Map<String, String> dataMap = new LinkedHashMap<String, String>();
    for (FxVolDefContentEntity d : dataList) {
      // StringBuffer buf=new StringBuffer();
      String col = d.getCol();
      String row = d.getRow();
      if (!colset.contains(col)) {
        colset.add(col);
      }
      if (!rowset.contains(row)) {
        rowset.add(row);
      }
      String k = col + row;
      String v = d.getValue();
      dataMap.put(k, v);
    }

    j1311.addElement("NumExpy", colset.size());
    j1311.addElement("NumDelt", rowset.size());

    String c = "~";// 连接符
    // 第一行
    StringBuffer Delta = new StringBuffer("FxVol" + c);
    // 余下行
    List<String> pList = new ArrayList<String>();

    // 遍历rowset 生成Delta
    Iterator<String> it = rowset.iterator();
    while (it.hasNext()) {
      String row = it.next();
      Delta.append(row + c);
    }
    // 添加日期
    Delta.append(ValueDate);

    j1311.addElement("Delta", Delta.toString());

    // 遍历colset
    Iterator<String> itcol = colset.iterator();
    while (itcol.hasNext()) {
      String col = itcol.next();
      StringBuffer line = new StringBuffer(col + c);
      Iterator<String> itrow = rowset.iterator();
      if (itrow.hasNext()) {
        String row = itrow.next();
        String key = col + row;
        line.append(dataMap.get(key) + c);
      }
      // 添加日期
      line.append(ValueDate);
      pList.add(line.toString());
    }
    // 遍历pList
    for (int i = 0; i < pList.size(); i++) {
      j1311.addElement("P." + i, pList.get(i));
    }
    
    String jout = j.write();

    System.out.println(jout);
    
    //生成fxopt_20180323_140926_usdcny.jsn
    String mainDir="D:/astardata";
    String innerDir=ValueDate;
    File f=new File(mainDir+innerDir);
    if(f.exists()){
      f.mkdir();
    }
    String inDataFileName="fxopt"+"_"+ValueDate+"_"+System.currentTimeMillis()
    +"_"+market.toLowerCase()+"\\\\.jsn";
    
    BufferedWriter out=new BufferedWriter(new FileWriter(f+inDataFileName));
    
    out.write(jout);
    out.flush();
    out.close();
    
    //调用CMD程序
    
    

  }

  /**
   * 查询波动率数据或者定义代码
   * 
   * @param contentid
   */
  public List<FxVolDefContentEntity> queryAllVolByContentid(String contentid) {
    String hql = "from FxVolDefContentEntity where contentid=?";

    List<FxVolDefContentEntity> list = super.findHql(hql, contentid);

    return list;
  }

  /**
   * 根据日期找到内容
   */
  public FxVolDataEntity findVolDataAndVolDefByDate(String date) {
    
    List<FxVolDataEntity> data = super.findHql("from FxVolDataEntity where fxVolDate=?", date);
    
    if (!data.isEmpty()) {
      FxVolDataEntity vol2 = (FxVolDataEntity)data.get(0);
      return vol2;
    } else {
      return null;
    }
  }

  @Override
  public List<FxVolDefEntity> findVolDefByMarketName(String market) {
    return super.findHql("from FxVolDefEntity where market=?", market);
  }

  @Override
  public FxVolDefEntity findVolDefByContentid(String contentid) {
    List<FxVolDefEntity> list = super.findHql("from FxVolDefEntity where contentid=?", contentid);
    if (!list.isEmpty()) {
      FxVolDefEntity def=(FxVolDefEntity)list.get(0);
      return def;
    } else {
      return null;
    }
  }

  /**
   * find discntMarket
   * 
   * @param market
   * @return
   */
  public String findDiscntMarketByMarketname(String market) {
    List<Object> discntMarket =
        super.findHql("select discntMarket from MarketConvFxEntity where marketName=?", market);
    return (String) discntMarket.get(0);
  }


 
}
