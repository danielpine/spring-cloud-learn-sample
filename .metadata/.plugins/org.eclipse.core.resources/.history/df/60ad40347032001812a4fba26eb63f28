package com.finanstar.fx.controller;

import com.finanstar.fx.entity.FxFxoEntityEntity;
import com.finanstar.fx.entity.MarketConvFxEntity;
import com.finanstar.fx.service.FxFxoEntityServiceI;
import com.finanstar.fx.service.MarketConvFxServiceI;
import com.finanstar.fx.service.MarketInstrFxServiceI;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import java.util.ArrayList;
import java.util.List;
import java.text.SimpleDateFormat;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import org.jeecgframework.core.common.controller.BaseController;
import org.jeecgframework.core.common.exception.BusinessException;
import org.jeecgframework.core.common.hibernate.qbc.CriteriaQuery;
import org.jeecgframework.core.common.model.common.TreeChildCount;
import org.jeecgframework.core.common.model.json.AjaxJson;
import org.jeecgframework.core.common.model.json.DataGrid;
import org.jeecgframework.core.constant.Globals;
import org.jeecgframework.core.util.StringUtil;
import org.jeecgframework.tag.core.easyui.TagUtil;
import org.jeecgframework.web.system.pojo.base.TSDepart;
import org.jeecgframework.web.system.service.SystemService;
import org.jeecgframework.core.util.MyBeanUtils;

import java.io.OutputStream;
import java.io.PrintWriter;

import org.jeecgframework.core.util.BrowserUtils;
import org.jeecgframework.poi.excel.ExcelExportUtil;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.entity.TemplateExportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.vo.TemplateExcelConstants;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.jeecgframework.core.util.ResourceUtil;
import java.io.IOException;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import java.util.Map;
import java.util.Scanner;
import java.util.HashMap;
import org.jeecgframework.core.util.ExceptionUtil;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.jeecgframework.core.beanvalidator.BeanValidators;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import java.net.URI;
import org.springframework.http.MediaType;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * @Title: Controller
 * @Description: 普通期权
 * @author onlineGenerator
 * @date 2018-03-19 16:43:26
 * @version V1.0
 *
 */
@Controller
@RequestMapping("/fxFxoEntityController")
public class FxFxoEntityController extends BaseController {
  /**
   * Logger for this class
   */
  private static final Logger logger = Logger.getLogger(FxFxoEntityController.class);

  @Autowired
  private FxFxoEntityServiceI fxFxoEntityService;
  @Autowired
  private MarketConvFxServiceI marketConvFxService;
  @Autowired
  private MarketInstrFxServiceI marketInstrFxService;
  @Autowired
  private SystemService systemService;
  @Autowired
  private Validator validator;



  /**
   * 普通期权列表 页面跳转
   * 
   * @return
   */
  @RequestMapping(params = "list")
  public ModelAndView list(HttpServletRequest request) {
    return new ModelAndView("com/finanstar/fx/fxFxoEntityList");
  }

  /**
   * 下拉菜单超链接 目标方法 查询市场惯例表并写到view
   * 
   * @return
   */
  @RequestMapping(params = "findmarket")
  public ModelAndView findmarket(HttpServletRequest request) {
    request.setAttribute("type", "fxo");
    System.out.println("market");
    ModelAndView view = new ModelAndView("com/finanstar/fx/fxo");
    List<MarketConvFxEntity> list = marketConvFxService.getList(MarketConvFxEntity.class);
    view.addObject("marketlist", list);
    // key:marketname value:this's jsonarray.
    JSONObject json = new JSONObject();
    for (MarketConvFxEntity mcf : list) {
      // marketmap's value array.
      JSONObject contain = JSONObject.fromObject(mcf);
      // singal market
      json.put(mcf.getMarketName(), contain);
    }
    view.addObject("marketjson", json);
    System.out.println(json);

    return view;
  }

  /**
   * easyui AJAX请求数据
   * 
   * @param request
   * @param response
   * @param dataGrid
   * @param user
   */

  @RequestMapping(params = "datagrid")
  public void datagrid(FxFxoEntityEntity fxFxoEntity, HttpServletRequest request,
      HttpServletResponse response, DataGrid dataGrid) {
    CriteriaQuery cq = new CriteriaQuery(FxFxoEntityEntity.class, dataGrid);
    // 查询条件组装器
    org.jeecgframework.core.extend.hqlsearch.HqlGenerateUtil.installHql(cq, fxFxoEntity,
        request.getParameterMap());
    try {
      // 自定义追加查询条件
    } catch (Exception e) {
      throw new BusinessException(e.getMessage());
    }
    cq.add();
    this.fxFxoEntityService.getDataGridReturn(cq, true);
    TagUtil.datagrid(response, dataGrid);
  }

  /**
   * 删除普通期权
   * 
   * @return
   */
  @RequestMapping(params = "doDel")
  @ResponseBody
  public AjaxJson doDel(FxFxoEntityEntity fxFxoEntity, HttpServletRequest request) {
    String message = null;
    AjaxJson j = new AjaxJson();
    fxFxoEntity = systemService.getEntity(FxFxoEntityEntity.class, fxFxoEntity.getId());
    message = "普通期权删除成功";
    try {
      fxFxoEntityService.delete(fxFxoEntity);
      systemService.addLog(message, Globals.Log_Type_DEL, Globals.Log_Leavel_INFO);
    } catch (Exception e) {
      e.printStackTrace();
      message = "普通期权删除失败";
      throw new BusinessException(e.getMessage());
    }
    j.setMsg(message);
    return j;
  }

  /**
   * 批量删除普通期权
   * 
   * @return
   */
  @RequestMapping(params = "doBatchDel")
  @ResponseBody
  public AjaxJson doBatchDel(String ids, HttpServletRequest request) {
    String message = null;
    AjaxJson j = new AjaxJson();
    message = "普通期权删除成功";
    try {
      for (String id : ids.split(",")) {
        FxFxoEntityEntity fxFxoEntity = systemService.getEntity(FxFxoEntityEntity.class, id);
        fxFxoEntityService.delete(fxFxoEntity);
        systemService.addLog(message, Globals.Log_Type_DEL, Globals.Log_Leavel_INFO);
      }
    } catch (Exception e) {
      e.printStackTrace();
      message = "普通期权删除失败";
      throw new BusinessException(e.getMessage());
    }
    j.setMsg(message);
    return j;
  }


  /**
   * 添加普通期权
   * 
   * @param ids
   * @return
   */
  @RequestMapping(params = "doAdd")
  @ResponseBody
  public String doAdd(FxFxoEntityEntity fxFxoEntity, HttpServletRequest request) {
    String message = null;
    AjaxJson j = new AjaxJson();
    message = "普通期权添加成功";
    System.out.println(fxFxoEntity);
    // 查询 波动率和曲线
    // 打包
    try {
      List<String> read = fxFxoEntityService.packageFxoDataToJson(fxFxoEntity);
      if (read.size() != 0) {
        Scanner in=new Scanner(System.in);
        for(String line:read){
          System.out.println(line.toCharArray().length);
          System.out.println((int)line.toCharArray()[in.nextInt()]);
        }
        in.close();
        
      }
      fxFxoEntityService.save(fxFxoEntity);
      systemService.addLog(message, Globals.Log_Type_INSERT, Globals.Log_Leavel_INFO);
    } catch (Exception e) {
      e.printStackTrace();
      message = "普通期权添加失败";
      throw new BusinessException(e.getMessage());
    }
    j.setMsg(message);
    return "ok";
  }

  /**
   * 更新普通期权
   * 
   * @param ids
   * @return
   */
  @RequestMapping(params = "doUpdate")
  @ResponseBody
  public AjaxJson doUpdate(FxFxoEntityEntity fxFxoEntity, HttpServletRequest request) {
    String message = null;
    AjaxJson j = new AjaxJson();
    message = "普通期权更新成功";
    FxFxoEntityEntity t = fxFxoEntityService.get(FxFxoEntityEntity.class, fxFxoEntity.getId());
    try {
      MyBeanUtils.copyBeanNotNull2Bean(fxFxoEntity, t);
      fxFxoEntityService.saveOrUpdate(t);
      systemService.addLog(message, Globals.Log_Type_UPDATE, Globals.Log_Leavel_INFO);
    } catch (Exception e) {
      e.printStackTrace();
      message = "普通期权更新失败";
      throw new BusinessException(e.getMessage());
    }
    j.setMsg(message);
    return j;
  }

  /**
   * 市场工具Ajax
   * 
   * @param ids
   * @return
   * @throws Exception
   */
  @RequestMapping(params = "findTenor")
  @ResponseBody
  public AjaxJson findTenor(HttpServletRequest request, HttpServletResponse response)
      throws Exception {
    List<String> t = marketInstrFxService.findInstrTenor(request.getParameter("marketname"));
    AjaxJson json = new AjaxJson();
    json.setObj(t);
    return json;

  }

  /**
   * 普通期权新增页面跳转
   * 
   * @return
   */
  @RequestMapping(params = "goAdd")
  public ModelAndView goAdd(FxFxoEntityEntity fxFxoEntity, HttpServletRequest req) {
    if (StringUtil.isNotEmpty(fxFxoEntity.getId())) {
      fxFxoEntity = fxFxoEntityService.getEntity(FxFxoEntityEntity.class, fxFxoEntity.getId());
      req.setAttribute("fxFxoEntityPage", fxFxoEntity);
    }
    return new ModelAndView("com/finanstar/fx/fxFxoEntity-add");
  }

  /**
   * 普通期权编辑页面跳转
   * 
   * @return
   */
  @RequestMapping(params = "goUpdate")
  public ModelAndView goUpdate(FxFxoEntityEntity fxFxoEntity, HttpServletRequest req) {
    if (StringUtil.isNotEmpty(fxFxoEntity.getId())) {
      fxFxoEntity = fxFxoEntityService.getEntity(FxFxoEntityEntity.class, fxFxoEntity.getId());
      req.setAttribute("fxFxoEntityPage", fxFxoEntity);
    }
    return new ModelAndView("com/finanstar/fx/fxFxoEntity-update");
  }

  /**
   * 导入功能跳转
   * 
   * @return
   */
  @RequestMapping(params = "upload")
  public ModelAndView upload(HttpServletRequest req) {
    req.setAttribute("controller_name", "fxFxoEntityController");
    return new ModelAndView("common/upload/pub_excel_upload");
  }

  /**
   * 导出excel
   * 
   * @param request
   * @param response
   */
  @RequestMapping(params = "exportXls")
  public String exportXls(FxFxoEntityEntity fxFxoEntity, HttpServletRequest request,
      HttpServletResponse response, DataGrid dataGrid, ModelMap modelMap) {
    CriteriaQuery cq = new CriteriaQuery(FxFxoEntityEntity.class, dataGrid);
    org.jeecgframework.core.extend.hqlsearch.HqlGenerateUtil.installHql(cq, fxFxoEntity,
        request.getParameterMap());
    List<FxFxoEntityEntity> fxFxoEntitys =
        this.fxFxoEntityService.getListByCriteriaQuery(cq, false);
    modelMap.put(NormalExcelConstants.FILE_NAME, "普通期权");
    modelMap.put(NormalExcelConstants.CLASS, FxFxoEntityEntity.class);
    modelMap.put(NormalExcelConstants.PARAMS, new ExportParams("普通期权列表",
        "导出人:" + ResourceUtil.getSessionUserName().getRealName(), "导出信息"));
    modelMap.put(NormalExcelConstants.DATA_LIST, fxFxoEntitys);
    return NormalExcelConstants.JEECG_EXCEL_VIEW;
  }

  /**
   * 导出excel 使模板
   * 
   * @param request
   * @param response
   */
  @RequestMapping(params = "exportXlsByT")
  public String exportXlsByT(FxFxoEntityEntity fxFxoEntity, HttpServletRequest request,
      HttpServletResponse response, DataGrid dataGrid, ModelMap modelMap) {
    modelMap.put(NormalExcelConstants.FILE_NAME, "普通期权");
    modelMap.put(NormalExcelConstants.CLASS, FxFxoEntityEntity.class);
    modelMap.put(NormalExcelConstants.PARAMS, new ExportParams("普通期权列表",
        "导出人:" + ResourceUtil.getSessionUserName().getRealName(), "导出信息"));
    modelMap.put(NormalExcelConstants.DATA_LIST, new ArrayList());
    return NormalExcelConstants.JEECG_EXCEL_VIEW;
  }

  @SuppressWarnings("unchecked")
  @RequestMapping(params = "importExcel", method = RequestMethod.POST)
  @ResponseBody
  public AjaxJson importExcel(HttpServletRequest request, HttpServletResponse response) {
    AjaxJson j = new AjaxJson();

    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
    Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
    for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
      MultipartFile file = entity.getValue();// 获取上传文件对象
      ImportParams params = new ImportParams();
      params.setTitleRows(2);
      params.setHeadRows(1);
      params.setNeedSave(true);
      try {
        List<FxFxoEntityEntity> listFxFxoEntityEntitys =
            ExcelImportUtil.importExcel(file.getInputStream(), FxFxoEntityEntity.class, params);
        for (FxFxoEntityEntity fxFxoEntity : listFxFxoEntityEntitys) {
          fxFxoEntityService.save(fxFxoEntity);
        }
        j.setMsg("文件导入成功！");
      } catch (Exception e) {
        j.setMsg("文件导入失败！");
        logger.error(ExceptionUtil.getExceptionMessage(e));
      } finally {
        try {
          file.getInputStream().close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
    return j;
  }

  @RequestMapping(method = RequestMethod.GET)
  @ResponseBody
  public List<FxFxoEntityEntity> list() {
    List<FxFxoEntityEntity> listFxFxoEntitys = fxFxoEntityService.getList(FxFxoEntityEntity.class);
    return listFxFxoEntitys;
  }

  @RequestMapping(value = "/{id}", method = RequestMethod.GET)
  @ResponseBody
  public ResponseEntity<?> get(@PathVariable("id") String id) {
    FxFxoEntityEntity task = fxFxoEntityService.get(FxFxoEntityEntity.class, id);
    if (task == null) {
      return new ResponseEntity(HttpStatus.NOT_FOUND);
    }
    return new ResponseEntity(task, HttpStatus.OK);
  }

  @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseBody
  public ResponseEntity<?> create(@RequestBody FxFxoEntityEntity fxFxoEntity,
      UriComponentsBuilder uriBuilder) {
    // 调用JSR303 Bean Validator进行校验，如果出错返回含400错误码及json格式的错误信息.
    Set<ConstraintViolation<FxFxoEntityEntity>> failures = validator.validate(fxFxoEntity);
    if (!failures.isEmpty()) {
      return new ResponseEntity(BeanValidators.extractPropertyAndMessage(failures),
          HttpStatus.BAD_REQUEST);
    }

    // 保存
    try {
      fxFxoEntityService.save(fxFxoEntity);
    } catch (Exception e) {
      e.printStackTrace();
      return new ResponseEntity(HttpStatus.NO_CONTENT);
    }
    // 按照Restful风格约定，创建指向新任务的url, 也可以直接返回id或对象.
    String id = fxFxoEntity.getId();
    URI uri = uriBuilder.path("/rest/fxFxoEntityController/" + id).build().toUri();
    HttpHeaders headers = new HttpHeaders();
    headers.setLocation(uri);

    return new ResponseEntity(headers, HttpStatus.CREATED);
  }

  @RequestMapping(value = "/{id}", method = RequestMethod.PUT,
      consumes = MediaType.APPLICATION_JSON_VALUE)
  public ResponseEntity<?> update(@RequestBody FxFxoEntityEntity fxFxoEntity) {
    // 调用JSR303 Bean Validator进行校验，如果出错返回含400错误码及json格式的错误信息.
    Set<ConstraintViolation<FxFxoEntityEntity>> failures = validator.validate(fxFxoEntity);
    if (!failures.isEmpty()) {
      return new ResponseEntity(BeanValidators.extractPropertyAndMessage(failures),
          HttpStatus.BAD_REQUEST);
    }

    // 保存
    try {
      fxFxoEntityService.saveOrUpdate(fxFxoEntity);
    } catch (Exception e) {
      e.printStackTrace();
      return new ResponseEntity(HttpStatus.NO_CONTENT);
    }

    // 按Restful约定，返回204状态码, 无内容. 也可以返回200状态码.
    return new ResponseEntity(HttpStatus.NO_CONTENT);
  }

  @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
  @ResponseStatus(HttpStatus.NO_CONTENT)
  public void delete(@PathVariable("id") String id) {
    fxFxoEntityService.deleteEntityById(FxFxoEntityEntity.class, id);
  }
}
